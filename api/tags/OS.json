{"name":"OS","slug":"OS","count":4,"postlist":[{"title":"辨认大小端以及系统位数","slug":"C-面试问题准备：辨认大小端以及系统位数","date":"2018-02-17T08:33:17.000Z","updated":"2018-03-14T13:23:16.000Z","comments":true,"path":"api/articles/C-面试问题准备：辨认大小端以及系统位数.json","excerpt":"<h2 id=\"什么是大小端-big-endian和small-endian\"><a href=\"#什么是大小端-big-endian和small-endian\" class=\"headerlink\" title=\"什么是大小端(big-endian和small-endian)\"></a>什么是大小端(big-endian和small-endian)</h2><p>即最高有效位(most significant)在低地址位就是大端，最低有效位(least significant)在低地址就是小端。<br>大概意思就是：我们取数据a = 0x12ff，那么最高有效位指的就是数字的0x12数据，最低有效位指的是0xff。<br>","keywords":null,"cover":null,"content":null,"text":"什么是大小端(big-endian和small-endian)即最高有效位(most significant)在低地址位就是大端，最低有效位(least significant)在低地址就是小端。<br>大概意思就是：我们取数据a = 0x12ff，那么最高有效位指的就是数字的0","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":33,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"},{"name":"OS","slug":"OS","count":4,"path":"api/tags/OS.json"}]},{"title":"如何实现守护进程","slug":"C-面试问题准备：如何实现守护进程","date":"2018-03-11T11:27:06.000Z","updated":"2018-03-14T13:23:16.000Z","comments":true,"path":"api/articles/C-面试问题准备：如何实现守护进程.json","excerpt":"<h3 id=\"守护进程\"><a href=\"#守护进程\" class=\"headerlink\" title=\"守护进程\"></a>守护进程</h3><p>守护进程也称精灵进程(Daemon)，是运行在后台的一种特殊进程。它独立于控制终端并且周期性的执行某种任务或等待处理某些发送的事件。Linux上的大多数服务器就是用守护进程实现的。","keywords":null,"cover":"/images/linuxImages/deamon.png","content":null,"text":"守护进程守护进程也称精灵进程(Daemon)，是运行在后台的一种特殊进程。它独立于控制终端并且周期性的执行某种任务或等待处理某些发送的事件。Linux上的大多数服务器就是用守护进程实现的。 守护进程可以解决产生死锁的一个必要条件，资源独占问题。即可以实现间接线程资源共享，对于打印","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":33,"path":"api/categories/面试.json"}],"tags":[{"name":"OS","slug":"OS","count":4,"path":"api/tags/OS.json"}]},{"title":"阻塞和非阻塞、同步和异步","slug":"C-面试问题准备：阻塞和非阻塞、同步和异步","date":"2018-03-10T14:11:46.000Z","updated":"2018-03-14T13:23:16.000Z","comments":true,"path":"api/articles/C-面试问题准备：阻塞和非阻塞、同步和异步.json","excerpt":"<h2 id=\"同步和异步主要针对C端\"><a href=\"#同步和异步主要针对C端\" class=\"headerlink\" title=\"同步和异步主要针对C端\"></a>同步和异步主要针对C端</h2><h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a><strong><font color=\"#DC143C\">同步</font></strong></h3><p>所谓同步，就是在c端发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。","keywords":null,"cover":null,"content":null,"text":"同步和异步主要针对C端同步所谓同步，就是在c端发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。 例如普通B/S模式（同步）：提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事异步当","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":33,"path":"api/categories/面试.json"}],"tags":[{"name":"OS","slug":"OS","count":4,"path":"api/tags/OS.json"}]},{"title":"系统调用与函数调用","slug":"系统调用与函数调用","date":"2018-03-15T02:33:24.000Z","updated":"2018-03-15T03:40:24.000Z","comments":true,"path":"api/articles/系统调用与函数调用.json","excerpt":"<blockquote>\n<p>Linux下对文件的操作有两种方式：系统调用（system call）和库函数调用（Library Functions）</p>\n</blockquote>\n<h3 id=\"系统调用（system-call）\"><a href=\"#系统调用（system-call）\" class=\"headerlink\" title=\"系统调用（system call）\"></a>系统调用（system call）</h3><blockquote>\n<p>指运行在<font color=\"#DC143C\">用户空间</font>的<font color=\"#DC143C\">应用程序</font>向<font color=\"#DC143C\">操作系统内核</font>请求某些服务的过程。系统调用提供了用户程序与操作系统之间的接口。一般来说系统调用都是在内核态执行，由于系统调用不考虑平台差异性，它是由内核直接提供，因而移植性较差（几乎没有移植性）。","keywords":null,"cover":"/images/syscall.png","content":null,"text":"Linux下对文件的操作有两种方式：系统调用（system call）和库函数调用（Library Functions）系统调用（system call）指运行在用户空间的应用程序向操作系统内核请求某些服务的过程。系统调用提供了用户程序与操作系统之间的接口。一般来说系统调用都是在","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":33,"path":"api/categories/面试.json"}],"tags":[{"name":"OS","slug":"OS","count":4,"path":"api/tags/OS.json"}]}]}