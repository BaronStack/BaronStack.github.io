{"title":"C++面试问题准备：Linux下GDB命令调试程序","slug":"C-面试问题准备：Linux下GDB命令调试程序","date":"2018-03-10T12:46:32.000Z","updated":"2018-03-10T14:36:25.000Z","comments":true,"path":"api/articles/C-面试问题准备：Linux下GDB命令调试程序.json","photos":[],"link":"","excerpt":"GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。<br> GDB中的命令固然很多，但我们只需掌握其中十个左右的命令，就大致可以完成日常的基本的程序调试工作","covers":["/images/linuxImages/vim.png","/images/linuxImages/gcc.png","/images/linuxImages/gdbProgram.png","/images/linuxImages/run.png","/images/linuxImages/breakDown.png","/images/linuxImages/info.png","/images/linuxImages/step.png","/images/linuxImages/siAdnNi.png"],"content":"<blockquote>\n<p>GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。<br> GDB中的命令固然很多，但我们只需掌握其中十个左右的命令，就大致可以完成日常的基本的程序调试工作</p>\n</blockquote>\n <a id=\"more\"></a>\n<p>命令参数：</p>\n<ul>\n<li>file &lt;文件名&gt;：加载被调试的可执行程序文件。因为一般都在被调试程序所在目录下执行GDB，因而文本名不需要带路径。</li>\n<li>r：Run的简写，运行被调试的程序。如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处</li>\n<li>c：Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。</li>\n<li>b：Breakpoint的简写，设置断点。两可以使用“行号”“函数名称”“执行地址”等方式指定断点位置。</li>\n<li>s, n：s–执行一行源程序代码，如果此行代码中有函数调用，则进入该函数，相当于其他调试器中的”step into”（单步跟踪进入)<br>n–执行一行源程序代码，此行代码中的函数调用也一并执行。相当于其它调试器中的“Step Over (单步跟踪)”</li>\n<li>si, ni：si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指令，而s/n针对的是源代码。</li>\n<li>display／undisplay：display，设置程序中断后欲显示的数据及其格式。例如，如果希望每次程序中断后可以看到即将被执行的下一条汇编指令，可以使用命令<code>display /i $pc</code>.其中 $pc 代表当前汇编指令，/i 表示以十六进行显示。当需要关心汇编代码时，此命令相当有用</li>\n<li>i：Info的简写，用于显示各类信息，详情请查阅“help i”。例如查看添加断点信息命令：<code>i b</code></li>\n<li>q：Quit的简写，退出GDB调试环境。</li>\n<li>help：GDB帮助命令，提供对GDB名种命令的解释说明。如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。<code>help display</code></li>\n</ul>\n<p>接下来进行实践，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">andFunction</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Andfunction is called,a = %d,b = %d\"</span>,a,b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = andFunction(a,b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"main is called. result is %d\"</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将该函数在终端下编译：</p>\n<p><code>vim testGDBFunction.c</code> 创建’.c’文件</p>\n<p><img src=\"/images/linuxImages/vim.png\" alt=\"\"></p>\n<p><code>gcc -g -Wall -o testGDBFunction testGDBFunction.c</code> 以’-g’形式编译，结果方便gdb调试。或者也可以运行命令<code>gcc -g testGDBFunction.c -o testGDBFunction</code></p>\n<p><img src=\"/images/linuxImages/gcc.png\" alt=\"\"></p>\n<p><code>gdb testGDBFunction</code></p>\n<p><img src=\"/images/linuxImages/gdbProgram.png\" alt=\"\"></p>\n<p><code>r</code>运行’-r’</p>\n<p><img src=\"/images/linuxImages/run.png\" alt=\"\"></p>\n<p><code>b main</code>和<code>b addFunction</code> 在该函数处设置断点</p>\n<p><img src=\"/images/linuxImages/breakDown.png\" alt=\"\"></p>\n<p><code>info b</code>显示断点信息</p>\n<p><img src=\"/images/linuxImages/info.png\" alt=\"\"></p>\n<p><code>s</code> step单步进入跟踪</p>\n<p><img src=\"/images/linuxImages/step.png\" alt=\"\"></p>\n<p><code>si</code>和<code>ni</code>单步执行且显示汇编指令</p>\n<p><img src=\"/images/linuxImages/siAdnNi.png\" alt=\"\"></p>\n","categories":[{"name":"面试","slug":"面试","count":23,"path":"api/categories/面试.json"}],"tags":[{"name":"linux","slug":"linux","count":6,"path":"api/tags/linux.json"}]}