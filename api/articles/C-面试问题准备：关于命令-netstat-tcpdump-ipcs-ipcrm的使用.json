{"title":"关于命令--netstat tcpdump ipcs ipcrm的使用","slug":"C-面试问题准备：关于命令-netstat-tcpdump-ipcs-ipcrm的使用","date":"2018-02-26T05:34:33.000Z","updated":"2018-03-14T13:21:03.000Z","comments":true,"path":"api/articles/C-面试问题准备：关于命令-netstat-tcpdump-ipcs-ipcrm的使用.json","photos":[],"link":"","excerpt":"网络通信命令–netstat tcpdumpnetstat：查看网络连接状态如果某一个网络服务已经启动，但是就是无法进行连接，这个时候就需要查询一下网络接口所监听的端口（port），来看看是否真的已经启动，因为有的时候屏幕上显示的OK并不一定真的就是”OK”。","covers":["/images/linuxImages/net_rn.png","/images/linuxImages/net_an.png","/images/linuxImages/net_tulp.png","/images/linuxImages/net_atunp.png","/images/linuxImages/tcpdump_data.png","/images/linuxImages/tcpdump_read.png","/images/linuxImages/ipcs.png","/images/linuxImages/ipcs_id.png"],"content":"<h2 id=\"网络通信命令–netstat-tcpdump\"><a href=\"#网络通信命令–netstat-tcpdump\" class=\"headerlink\" title=\"网络通信命令–netstat tcpdump\"></a>网络通信命令–netstat tcpdump</h2><h3 id=\"netstat：查看网络连接状态\"><a href=\"#netstat：查看网络连接状态\" class=\"headerlink\" title=\"netstat：查看网络连接状态\"></a><strong>netstat：查看网络连接状态</strong></h3><blockquote>\n<p>如果某一个网络服务已经启动，但是就是无法进行连接，这个时候就需要查询一下网络接口所监听的端口（port），来看看是否真的已经启动，因为有的时候屏幕上显示的OK并不一定真的就是”OK”。<a id=\"more\"></a></p>\n</blockquote>\n<p>关于<code>netstat</code>的参数如下：</p>\n<ul>\n<li>-r : <font color=\"#FF7F50\"> 列出路由表（route table），功能与route命令相似</font></li>\n<li>-n : 不使用主机名与服务名称，使用IP与port number，如同route -n 与网络相关的参数</li>\n<li>-a : <font color=\"#FF7F50\">列出所有的链接状态，包括 tcp/udp/unix socket</font></li>\n<li>-t : 仅列出TCP数据包的连接</li>\n<li>-u : 仅列出UDP数据包的连接</li>\n<li>-l : <font color=\"#FF7F50\">仅列出已在Listen（监听）状态的服务的网络状态</font></li>\n<li>-p : 列出PID与Program的文件名</li>\n<li>-c : 可以设置几秒钟自动更新一次，例如 -c 5 为每5秒更新一次网络状态的显示</li>\n</ul>\n<p><strong><font color=\"#DC143C\">列出当前路由表的状态</font></strong></p>\n<p><img src=\"/images/linuxImages/net_rn.png\" alt=\"\"></p>\n<p>其中显示参数含义如下：</p>\n<p><strong>Destination(目标主机)</strong> : The destination network or destination host. 目标网络或目标主机.  </p>\n<p><strong>GateWay（网关）</strong>:The gateway address or ‘*’ if none set. 网关地址，如果没有就显示星号  </p>\n<p><strong>Genmask（网络掩码）</strong>: The  netmask  for  the  destination net; ‘255.255.255.255’ for a host destination and ‘0.0.0.0’ for the default route.  </p>\n<p><strong>Flags：标志位</strong>:</p>\n<ul>\n<li>U (route is up)：该路由是启动的；</li>\n<li>H (target is a host)：目标是一部主机 (IP) 而非网域；    </li>\n<li>G (use gateway)：需要透过外部的主机 (gateway) 来转递封包</li>\n<li>R (reinstate route for dynamic routing)：使用动态路由时，恢复路由资讯的旗标；</li>\n<li>D (dynamically installed by daemon or redirect)：已经由服务或转 port 功能设定为动态路由</li>\n<li>M (modified from routing daemon or redirect)：路由已经被修改了；</li>\n<li>!  (reject route)：这个路由将不会被接受(用来抵挡不安全的网域！)</li>\n<li>A (installed by addrconf)</li>\n</ul>\n<p><strong>Iface 接口</strong>:Interface to which packets for this route will be sent.比如eth0,eth1等网络接口名</p>\n<p><strong><font color=\"#DC143C\">列出当前所有网络连接状态</font></strong></p>\n<p><img src=\"/images/linuxImages/net_an.png\" alt=\"\"></p>\n<blockquote>\n<p>这里建议使用命令参数的时候加上”-n”，可以避免主机名与服务名称的反查，直接以IP和端口号码显示，显示的速度会更快</p>\n</blockquote>\n<p>其中显示的参数的意义如下：</p>\n<p><strong>Proto</strong>: 该连接的数据包协议，主要为TCP/UDP<br><strong>Recv-Q</strong>: 由非用户程序连接所复制而来的总bytes数<br><strong>Send-Q</strong>: 由远程主机发送而来，但是不具备ACK连接的总bytes数，一般指UDP连接<br><strong>Local Address</strong>: 本地地址，可以是IP（需要-n选项存在），也可以是主机名<br><strong>Foreign Address</strong>：远程主机IP与port number<br><strong>stat:状态栏</strong>：</p>\n<ul>\n<li>ESTABLISHED：已建立连接的状态</li>\n<li>SYN_SENT：发出主动连接（SYN标志）的连接数据包</li>\n<li>SYN_RECV: 接受到一个要求连接的主动连接数据包</li>\n<li>FIN_WAIT1: 该套接字服务（socket）已中断，该连接正在断线中</li>\n<li>FIN_WAIT2: 该连接已挂断，但正在等待对方相应断线确认的数据包</li>\n<li>TIME_WAIT: 该连线已挂断，但socket还在网络上等待结束</li>\n<li>LISTEN: 指该端口等待连接请求，可以使用”-l”参数查阅</li>\n</ul>\n<p><strong><font color=\"#DC143C\">查看已经启动的网络服务</font></strong></p>\n<p><img src=\"/images/linuxImages/net_tulp.png\" alt=\"\"></p>\n<blockquote>\n<p>可以发现很多网络服务仅仅针对本机的IO开放，因特网是连接不到该端口的</p>\n</blockquote>\n<p><strong><font color=\"#DC143C\">查看本机上所有的网络连接状态</font></strong></p>\n<p><img src=\"/images/linuxImages/net_atunp.png\" alt=\"\"></p>\n<blockquote>\n<p>这里注意：只有Client端是随机开放一个大于1024的port进行连接，此外只有root可以启动小于1024的port</p>\n</blockquote>\n<h3 id=\"tcpdump-文件接口数据包捕获器\"><a href=\"#tcpdump-文件接口数据包捕获器\" class=\"headerlink\" title=\"tcpdump:文件接口数据包捕获器\"></a><strong>tcpdump:文件接口数据包捕获器</strong></h3><blockquote>\n<p>tcpdump这个软件是一个可以分析数据包流向，甚至可以对数据包内容进行监听。如果双方进行数据传输的时候是明文传输，那么在Router或者hub上就有可能被别人监听走<br><strong><font color=\"#DC143C\">tcpdump必须使用root身份执行</font></strong></p>\n</blockquote>\n<p>关于<code>tcpdump</code>参数如下：</p>\n<ul>\n<li>-A ：<font color=\"#FF7F50\">数据包内容以ASCII显示，通常用来抓取WWW的网页数据包</font></li>\n<li>-e : 使用数据链路层的MAC数据包来显示</li>\n<li>-nn : <font color=\"#FF7F50\">直接以IP和port number显示，而非主机名与服务名称　</font></li>\n<li>-q : 仅列出较为简短的数据包信息，每一行的内容比较精简</li>\n<li>-X : 可以列出十六进制以及ASCII的数据包内容，对于监听数据包的内容很有用</li>\n<li>-i : <font color=\"#FF7F50\">后面接要监听的网络接口，例如 eth0,eth1等</font></li>\n<li>-w : <font color=\"#FF7F50\">将监听所得的数据包数据存储下来，用这个参数，后面接文件名</font></li>\n<li>-r : 从后面接的文件将数据包读出来。这个文件是已经存在的文件且该文件是由-w参数生成的文件</li>\n<li>-c : 监听的数据包数，如果没有该参数，tcpdump会持续不断的监听，直到用户输入ctrl+c为止</li>\n</ul>\n<p><strong><font color=\"#DC143C\">监听指定的网络接口，设置监听数据包并存储到指定文件</font></strong></p>\n<p><img src=\"/images/linuxImages/tcpdump_data.png\" alt=\"\"></p>\n<blockquote>\n<p>可以在当前目录下查看生成了一个名为 tcpdata的文件，但是使用常用的文本查看工具打开后是乱码，所以想要查看该文件需要一下命令</p>\n</blockquote>\n<p><strong><font color=\"#DC143C\">查看以-w生成的网络数据内容</font></strong></p>\n<p><img src=\"/images/linuxImages/tcpdump_read.png\" alt=\"\"></p>\n<p>关于文件内容的含义(取第一条数据包进行分析)：</p>\n<ul>\n<li>23:17:13.858250：这是该数据包被捕获的时间，”时：分：秒”的单位</li>\n<li>IP：通过的通信协议是IP</li>\n<li>172.16.70.188.41658 &gt; ：传送端是172.16.70.188这个IP，传送的port number是<strong>41658</strong>，而大于(&gt;)的符号指的是<strong>数据包传输的方向</strong></li>\n<li>117.18.237.29.http: 接收端的IP是117.18.237.29，且该主机开启的port是http端口</li>\n<li>[.], ack 19640744：这里是ACK相关的资料（由于本人在截屏的时候没有操作浏览器，所以没有获取太多的主动连接数据包，仅仅是保持连接数据的数据包）</li>\n</ul>\n<h2 id=\"进程通信命令–ipcs-ipcrm\"><a href=\"#进程通信命令–ipcs-ipcrm\" class=\"headerlink\" title=\"进程通信命令–ipcs ipcrm\"></a>进程通信命令–ipcs ipcrm</h2><h3 id=\"ipcs-提供进程间通信方式\"><a href=\"#ipcs-提供进程间通信方式\" class=\"headerlink\" title=\"ipcs:提供进程间通信方式\"></a><strong>ipcs:提供进程间通信方式</strong></h3><blockquote>\n<p>主要是提供查看linux/unix上提供的一些进程间通信方式的信息，包括：共享内存、消息队列、信号量的状态</p>\n</blockquote>\n<p>关于<code>ipcs</code>的参数如下：</p>\n<ul>\n<li>-a:显示所有的IPC设施</li>\n<li>-q:显示所有的消息队列Message Queue</li>\n<li>-s:显示所有的信号量</li>\n<li>-m:显示所有的共享内存</li>\n<li>-p:显示最近访问过IPC设施的进程ID</li>\n<li>-c:显示IPC设施的权限关系</li>\n<li>-t:显示IPC设施的最后操作时间</li>\n<li>-u:显示IPC设施的当前状态</li>\n</ul>\n<p><strong><font color=\"#DC143C\">查看目前为止主机的进程通信机制的内容：</font></strong></p>\n<p><img src=\"/images/linuxImages/ipcs.png\" alt=\"\"></p>\n<p>关于显示内容的含义（主要显示的共享内存的信息，在操作系统中主要通信方式是共享内存）：</p>\n<ul>\n<li>key: 应用程序定义的键值，如果是私有对象，则键值为0。即我们显示的</li>\n<li>shmid：栏中列出共享内存的ID</li>\n<li>owner：创建共享内存的用户是vigor</li>\n<li>perms: 该通信机制的权限：600。即只有读的权限</li>\n<li>bytes: 这块共享内存的大小</li>\n<li>nattch: 连接在关联的共享内存段的进程数,所显示的都是两个</li>\n<li>status: 列出当前共享内存的状态</li>\n</ul>\n<p><strong><font color=\"#DC143C\">查看共享内存中进程对应的端口号</font></strong></p>\n<p><img src=\"/images/linuxImages/ipcs_id.png\" alt=\"\"></p>\n<h3 id=\"ipcrm-移除某一个进程通信机制\"><a href=\"#ipcrm-移除某一个进程通信机制\" class=\"headerlink\" title=\"ipcrm:移除某一个进程通信机制\"></a><strong>ipcrm:移除某一个进程通信机制</strong></h3><blockquote>\n<p>ipcrm 用来删除一个或者更多消息队列、信号量或者共享内存标识</p>\n</blockquote>\n<p>关于<code>ipcrm</code>的参数如下：</p>\n<ul>\n<li>-m SharedMemory id 删除共享内存标识 SharedMemoryID。与 SharedMemoryID 有关联的共享内存段以及数据结构都会在最后一次拆离操作后删除。</li>\n<li>-M SharedMemoryKey 删除用关键字 SharedMemoryKey 创建的共享内存标识。与其相关的共享内存段和数据结构段都将在最后一次拆离操作后删除。</li>\n<li>-q MessageID 删除消息队列标识 MessageID 和与其相关的消息队列和数据结构。</li>\n<li>-Q MessageKey 删除由关键字 MessageKey 创建的消息队列标识和与其相关的消息队列和数据结构。</li>\n<li>-s SemaphoreID 删除信号量标识 SemaphoreID 和与其相关的信号量集及数据结构。</li>\n<li>-S SemaphoreKey 删除由关键字 SemaphoreKey 创建的信号标识和与其相关的信号量集和数据结构。</li>\n</ul>\n","categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}]}