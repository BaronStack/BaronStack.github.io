{"title":"C++面试问题准备：linux cpu、系统性能调试相关命令","slug":"C-面试问题准备：linux-cpu、系统性能调试相关命令","date":"2018-02-26T13:07:17.000Z","updated":"2018-02-26T16:07:24.000Z","comments":true,"path":"api/articles/C-面试问题准备：linux-cpu、系统性能调试相关命令.json","photos":[],"link":"","excerpt":"Linux下查看内存和CPU占用情况ps:将某个时间点的进程运行情况选取下来1<br>2<br>3<br>ps aux  &lt;== 查看系统所有进程数据<br>ps -lA &lt;== 也是能够查看所有系统的数据<br>ps axjf &lt;== 连同部分进程树状态<br>","covers":["/images/linuxImages/ps_l.png","/images/linuxImages/ps_aux.png","/images/linuxImages/ps_lA.png","/images/linuxImages/ps_axjf.png","/images/linuxImages/top.png","/images/linuxImages/top_b.png","/images/linuxImages/top_p.png","/images/linuxImages/pstree_A.png","/images/linuxImages/pstree_Aup.png","/images/linuxImages/iostat_d.png","/images/linuxImages/iostat_x.png","/images/linuxImages/iostat_c.png"],"content":"<h2 id=\"Linux下查看内存和CPU占用情况\"><a href=\"#Linux下查看内存和CPU占用情况\" class=\"headerlink\" title=\"Linux下查看内存和CPU占用情况\"></a>Linux下查看内存和CPU占用情况</h2><h3 id=\"ps-将某个时间点的进程运行情况选取下来\"><a href=\"#ps-将某个时间点的进程运行情况选取下来\" class=\"headerlink\" title=\"ps:将某个时间点的进程运行情况选取下来\"></a><strong><code>ps</code>:将某个时间点的进程运行情况选取下来</strong></h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ps</span> aux  &lt;== 查看系统所有进程数据</span><br><span class=\"line\"><span class=\"keyword\">ps</span> -lA &lt;== 也是能够查看所有系统的数据</span><br><span class=\"line\"><span class=\"keyword\">ps</span> axjf &lt;== 连同部分进程树状态</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><code>ps</code>命令参数：</p>\n<ul>\n<li>-A ： 所有的进程都显示出来，与-e具有同样的作用</li>\n<li>-a ： 有效用户（effective user）相关的进程</li>\n<li>-u ： 不与terminal有关的所有进程</li>\n<li>x ： 通常与 a 这个参数一起使用，可列出较完整的信息<br>输出格式规划</li>\n<li>l ： 较长、较详细地将该PID的信息列出</li>\n<li>j ： 工作的格式（jobs format）</li>\n<li>-f ： 做一个更为完整的输出</li>\n</ul>\n<h3 id=\"仅查看自己的bash相关进程\"><a href=\"#仅查看自己的bash相关进程\" class=\"headerlink\" title=\"仅查看自己的bash相关进程\"></a><strong><font color=\"#DC143C\">仅查看自己的bash相关进程</font></strong></h3><p><img src=\"/images/linuxImages/ps_l.png\" alt=\"\"></p>\n<blockquote>\n<p>仅列出自己操作环境下的进程，即最上层的父进程会是你自己的bash，而没有扩展到init这个进程中去</p>\n</blockquote>\n<p>显示出来的数据含义如下：</p>\n<ul>\n<li>F ： 代表这个进程标志，说明这个进程的权限，常见号码有：<ul>\n<li>若为4标识此进程权限为root</li>\n<li>若为1则表示此子进程仅可复制而无法实际执行</li>\n</ul>\n</li>\n<li>S ： 代表这个进程状态，主要的状态有：<ul>\n<li>R（Running）：该进程正在运行中</li>\n<li>S（sleep）：该进程目前正在睡眠状态，但可以被唤醒</li>\n<li>D：不可被唤醒状态，通常这个进程可能在等待I／O的情况</li>\n<li>T：停止状态，可能是在工作控制或者除错状态</li>\n<li>Z（Zombie）：”僵尸”状态，进程已经已经终止，但是无法被删除在内存之外</li>\n</ul>\n</li>\n<li>UID／PID／PPID：代表此进程被该UID所拥有／进程的PID号码／此进程的父进程PID号码</li>\n<li>C：代表CPU使用率，单位为百分比</li>\n<li>PRI/NI：代表此进程被CPU执行的优先级，数值越小代表进程越快被CPU执行。</li>\n<li>ADDR／SZ／WCHAN：都与内存有关，ADDR是kernel function，指出该进程在内存的哪个部分，如果是running的进程。一般就会显示”-“。SZ带表此进程用掉多少内存／WCHAN表示目前进程是否运行中，同样若为-表示正在运中</li>\n<li>TTY： 登录者的终端机位置，若为远程登录，则使用动态终端接口</li>\n<li>TIME：使用掉的CPU时间，此为<strong>花费CPU运行的时间，并非系统时间</strong></li>\n<li>CMD： 即触发进程的命令</li>\n</ul>\n<blockquote>\n<p>那么我们针对以上图片显示的命令做一个解释：它说明的是bash的进程属于UID为1000的用户，状态为睡眠（第二行），之所以为睡眠是因为它触发了ps（状态为run）的原因。此进程的PID为130209，优先执行顺序为80，执行bash所取得的终端接口为pts/6,运行状态为等待。</p>\n</blockquote>\n<h3 id=\"查看系统所有进程\"><a href=\"#查看系统所有进程\" class=\"headerlink\" title=\"查看系统所有进程\"></a><strong><font color=\"#DC143C\">查看系统所有进程</font></strong></h3><p><img src=\"/images/linuxImages/ps_aux.png\" alt=\"\"></p>\n<blockquote>\n<p>该显示与<code>ps -l</code>内容并不相同</p>\n</blockquote>\n<p>该显示数据意义如下：</p>\n<ul>\n<li>USER：进程所属用户账号</li>\n<li>PID：进程标识符</li>\n<li>%CPU：该进程用掉的CPU资源百分比</li>\n<li>%MEM：该进程所占用物理内存百分比</li>\n<li>VSZ：该进程用掉的虚拟内存量</li>\n<li>RSS：该进程占用的固定内存量</li>\n<li>TTY：该进程所运行的终端机</li>\n<li>STAT：该进程目前状态，与<code>ps -l</code>中 S 标识相同</li>\n<li>TIME：该进程实际使用CPU运行时间</li>\n<li>COMMAND：该进程实际命令</li>\n</ul>\n<h3 id=\"以ps-l所显示的数据格式显示所有进程\"><a href=\"#以ps-l所显示的数据格式显示所有进程\" class=\"headerlink\" title=\"以ps -l所显示的数据格式显示所有进程\"></a><strong><font color=\"#DC143C\">以<code>ps -l</code>所显示的数据格式显示所有进程</font></strong></h3><p><img src=\"/images/linuxImages/ps_lA.png\" alt=\"\"></p>\n<blockquote>\n<p>该显示的数据字段是与<code>ps -l</code>所显示的相同，但是显示的是所有的</p>\n</blockquote>\n<h3 id=\"列出类似进程树的程序显示\"><a href=\"#列出类似进程树的程序显示\" class=\"headerlink\" title=\"列出类似进程树的程序显示\"></a><strong><font color=\"#DC143C\">列出类似进程树的程序显示</font></strong></h3><p><img src=\"/images/linuxImages/ps_axjf.png\" alt=\"\"><br><img src=\"/images/linuxImages/ps_tree.png\" alt=\"\"></p>\n<blockquote>\n<p>要显示进程树最好的且最直观的命令就是pstree，同样我们可以从以上截图中看到我是通过运行中的bash执行ps axjf命令。<br>此外请大家注意 <strong><font color=\"#DC143C\">僵尸进程：该进程已经执行完毕，或者是因为事故应该要终止，但是该进程的父进程却无法将该进程结束掉，造成该进程一直存在在内存当中。即如果发现某个进程CMD后面还接上<font size=\"6\">\\<defunct></defunct></font>时就代表该进程是僵尸进程</font></strong></p>\n</blockquote>\n<h3 id=\"top-动态查看进程的变化\"><a href=\"#top-动态查看进程的变化\" class=\"headerlink\" title=\"top:动态查看进程的变化\"></a><strong><code>top</code>:动态查看进程的变化</strong></h3><blockquote>\n<p><code>ps</code>是选取一个时间点的进程状态，top则可以持续检测进程运行的状态</p>\n</blockquote>\n<p><code>top</code>命令参数如下：</p>\n<ul>\n<li>-d ： 后面可以接秒数，即整个系统界面更新的秒数</li>\n<li>-b ： 以批次的方式执行 top，通常会搭配数据流重定向来将批处理的结果输出成文件</li>\n<li>-n ： 与-b搭配，意义是，需要进行几次 top 的输出结果</li>\n<li>-p ： 制定某些个PID来进行查看监测</li>\n<li>在top执行过程中可以使用的按键命令：<ul>\n<li>? ： 显示在top当中可以输入的按键命令</li>\n<li>P ： 以CPU的使用资源排序显示</li>\n<li>M ： 以内存的使用资源来排序显示</li>\n<li>N ： 以PID来排序</li>\n<li>T ： 由该进程使用的CPU 时间积累排序</li>\n<li>k ： 给予某个PID一个信号</li>\n<li>r ： 给予某个PID重新制定一个nice值；</li>\n<li>q ： 离开top软件的按键</li>\n</ul>\n</li>\n</ul>\n<p>如下，我们使用命令<code>top -d 2</code>做一个显示:</p>\n<p><img src=\"/images/linuxImages/top.png\" alt=\"\"></p>\n<p>其中显示数据代表如下：</p>\n<ul>\n<li>第一行：<br>06:19:45 — 当前系统时间<br>3 days, 7:29 — 系统已经运行了3天7小时29分钟（在这期间没有重启过）<br>1 users — 当前有1个用户登录系统<br>load average: 0。00, 0。00, 0。00 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。<blockquote>\n<p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p>\n</blockquote>\n</li>\n<li>第二行：<br>Tasks — 任务（进程），系统现在共有249个进程，其中处于运行中的有1个，248个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个<blockquote>\n<p>这里需重点关注zombie状态的进程，快速找出僵尸进程并对问题进行分析解决</p>\n</blockquote>\n</li>\n<li>第三行：cpu状态<br>1.0% us — 用户空间占用CPU的百分比。<br>0.5% sy — 内核空间占用CPU的百分比。<br>0.0% ni — 改变过优先级的进程占用CPU的百分比<br>98.5% id — 空闲CPU百分比<br>0.0% wa — IO等待占用CPU的百分比<br>0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比<br>0.0% si — 软中断（Software Interrupts）占用CPU的百分比</li>\n<li>第四行是第二个CPU的状态</li>\n<li>第五行：内存状态<br>998260k total — 物理内存总量（998MB）<br>616476k used — 使用中的内存总量（616MB）<br>115876k free — 空闲内存总量（115MB）<br>265908k buffers — 缓存的内存量 （265MB）</li>\n<li>第六行：swap交换分区<br>1046524k total — 交换区总量（1GB）<br>551864k used — 使用的交换区总量（551MB）<br>494660k free — 空闲交换区总量（494MB）<br>163172k cached — 缓冲的交换区总量（163MB）</li>\n<li>第七行：空行，当在top进程中输入命令时显示状态的地方</li>\n<li>第八行一下：各进程（任务）的状态监控<ul>\n<li>PID — 进程id</li>\n<li>USER — 进程所有者</li>\n<li>PR — 进程优先级</li>\n<li>NI — nice值。负值表示高优先级，正值表示低优先级</li>\n<li>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</li>\n<li>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</li>\n<li>SHR — 共享内存大小，单位kb</li>\n<li>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</li>\n<li>%CPU — 上次更新到现在的CPU时间占用百分比</li>\n<li>%MEM — 进程使用的物理内存百分比</li>\n<li>TIME+ — 进程使用的CPU时间总计，单位1/100秒</li>\n<li>COMMAND — 进程名称（命令名/命令行）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"将top的信息更新2次后结果输出到-tmp-top-txt\"><a href=\"#将top的信息更新2次后结果输出到-tmp-top-txt\" class=\"headerlink\" title=\"将top的信息更新2次后结果输出到/tmp/top.txt\"></a><strong><font color=\"#DC143C\">将top的信息更新2次后结果输出到/tmp/top.txt</font></strong></h3><p><img src=\"/images/linuxImages/top_b.png\" alt=\"\"></p>\n<blockquote>\n<p>这样我们就可以将系统进程运行状态保存下来，从而方便进行之后的系统查错,而且该方法也可以得到全部的进程界面</p>\n</blockquote>\n<h3 id=\"对单一进程进行监测\"><a href=\"#对单一进程进行监测\" class=\"headerlink\" title=\"对单一进程进行监测\"></a><strong><font color=\"#DC143C\">对单一进程进行监测</font></strong></h3><p>执行命令<code>top -d 2 -p 1282</code>显示结果如下： </p>\n<p><img src=\"/images/linuxImages/top_p.png\" alt=\"\"></p>\n<h3 id=\"利用pstree进程树命令查看指定进程的父子进程\"><a href=\"#利用pstree进程树命令查看指定进程的父子进程\" class=\"headerlink\" title=\"利用pstree进程树命令查看指定进程的父子进程\"></a><strong><font color=\"#DC143C\">利用<code>pstree</code>进程树命令查看指定进程的父子进程</font></strong></h3><p><img src=\"/images/linuxImages/pstree_A.png\" alt=\"\"></p>\n<blockquote>\n<p>显示系统所有进程树的相关性，截图没办法全面截取，大家实践的时候将它重定向到一个文件</p>\n</blockquote>\n<p><img src=\"/images/linuxImages/pstree_Aup.png\" alt=\"\"></p>\n<blockquote>\n<p>其中1282PID 所对应的进程为<code>sudo</code>,其父进程为<code>bash</code>,子进程为<code>su</code></p>\n</blockquote>\n<h2 id=\"Linux下进行系统性能调试\"><a href=\"#Linux下进行系统性能调试\" class=\"headerlink\" title=\"Linux下进行系统性能调试\"></a>Linux下进行系统性能调试</h2><p>利用<code>iostat</code>监测IO状态</p>\n<blockquote>\n<p>这里需要先在系统执行命令<code>apt install sysstat</code>，这样才能正常使用iostat</p>\n</blockquote>\n<p><code>iostat</code>常用命令：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iostat -d -k <span class=\"number\">1</span> <span class=\"number\">10</span>        #查看TPS和吞吐量信息</span><br><span class=\"line\">iostat -d -x -k <span class=\"number\">1</span> <span class=\"number\">10</span>      #查看设备使用率（%util）、响应时间（await）</span><br><span class=\"line\">iostat -c <span class=\"number\">1</span> <span class=\"number\">10</span>            #查看cpu状态</span><br></pre></td></tr></table></figure></p>\n<p>参数使用如下：</p>\n<ul>\n<li>-c ：用来获取cpu部分状态值</li>\n<li>-x ：获得更多统计信息</li>\n<li>-d ：显示设备（磁盘）使用状态</li>\n<li>-k ：某些使用block为单位的列强制使用Kilobytes为单位</li>\n</ul>\n<h3 id=\"显示磁盘使用状态，每隔一秒刷新一次，共显示十次\"><a href=\"#显示磁盘使用状态，每隔一秒刷新一次，共显示十次\" class=\"headerlink\" title=\"显示磁盘使用状态，每隔一秒刷新一次，共显示十次\"></a><strong><font color=\"#DC143C\">显示磁盘使用状态，每隔一秒刷新一次，共显示十次</font></strong></h3><p><img src=\"/images/linuxImages/iostat_d.png\" alt=\"\"></p>\n<p>以上显示字段代表含义如下：</p>\n<ul>\n<li>tps：该设备每秒的传输次数</li>\n<li>kB_read/s：每秒从设备（drive expressed）读取的数据量</li>\n<li>kB_wrtn/s：每秒向设备（drive expressed）写入的数据量</li>\n<li>kB_read：读取的总数据量</li>\n<li>kB_wrtn：写入的总数量数据量</li>\n</ul>\n<blockquote>\n<p>这些单位都为Kilobytes</p>\n</blockquote>\n<h3 id=\"利用iostat获取更多的统计信息\"><a href=\"#利用iostat获取更多的统计信息\" class=\"headerlink\" title=\"利用iostat获取更多的统计信息\"></a><strong><font color=\"#DC143C\">利用<code>iostat</code>获取更多的统计信息</font></strong></h3><p><img src=\"/images/linuxImages/iostat_x.png\" alt=\"\"></p>\n<p>获取数据代表含义如下：</p>\n<ul>\n<li>rrqm/s：每秒这个设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并Merge）<strong><font color=\"#DC143C\">主要是虚拟文件系统与文件系统的交互过程中一个防止重复访问的机制</font></strong></li>\n<li>wrqm/s：每秒这个设备相关的写入请求有多少被Merge了</li>\n<li>rsec/s：每秒读取的扇区数</li>\n<li>wsec/：每秒写入的扇区数</li>\n<li>r/s：每秒向设备发出的读请求次数</li>\n<li>w/s：每秒向设备发出的写请求次数</li>\n<li>await：每一个IO请求的处理的平均时间（单位是：毫秒）<strong>这里可以理解为IO的响应时间，一般地系统IO响应时间应该低于5ms，如果大于10ms就比较大了。</strong></li>\n<li>%util：在统计时间内所有处理IO时间，除以总共统计时间</li>\n</ul>\n<h3 id=\"查看CPU状态\"><a href=\"#查看CPU状态\" class=\"headerlink\" title=\"查看CPU状态\"></a><strong><font color=\"#DC143C\">查看CPU状态</font></strong></h3><p><img src=\"/images/linuxImages/iostat_c.png\" alt=\"\"></p>\n<p>获取数据代表含义如下：</p>\n<ul>\n<li>%user:用户程序占用CPU的百分比</li>\n<li>%nice：进程优先级调控指令占用CPU的百分比</li>\n<li>%system：系统进程占用CPU的百分比</li>\n<li>%ioWait:io设备占用占用CPU的百分比</li>\n<li>%idle：CPU空闲状态的百分比</li>\n</ul>\n","categories":[{"name":"面试","slug":"面试","count":27,"path":"api/categories/面试.json"}],"tags":[{"name":"linux","slug":"linux","count":6,"path":"api/tags/linux.json"}]}