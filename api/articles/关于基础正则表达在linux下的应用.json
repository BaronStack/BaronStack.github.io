{"title":"关于基础正则表达在linux下的应用","slug":"关于基础正则表达在linux下的应用","date":"2018-01-13T15:52:44.000Z","updated":"2018-01-13T17:07:13.000Z","comments":true,"path":"api/articles/关于基础正则表达在linux下的应用.json","photos":[],"link":"","excerpt":"语系环境配置在Linux系统下，想要使用支持正则表达式的工具，比如awk,grep,sed,vi等，","covers":null,"content":"<h4 id=\"语系环境配置\"><a href=\"#语系环境配置\" class=\"headerlink\" title=\"语系环境配置\"></a>语系环境配置</h4><p>在Linux系统下，想要使用支持正则表达式的工具，比如awk,grep,sed,vi等，<a id=\"more\"></a>那么就需要切换语系，因为<br>LANG=C 语系输出是a…zA…Z，这种形式是支持正则的字符取用规则，但是像zh_CN语系的输出则是aA.bB….zZ则不支持正则<br>的取用规则。</p>\n<p>所以在使用工具前先确保当前脚本处于该语系配置环境，否则无法使用正则表达式。</p>\n<p>利用命令</p>\n<p><code>export LANG=C</code></p>\n<p>保证当前语系环境。<br>同时执行命令</p>\n<p><code>alias grep=&#39;grep --color=auto&#39;</code></p>\n<p>alias命令是设置缩减命令，比如用alias ll=’ls -l’ 命令使得ll是ls -l的代替。<br>以上命令使得grep搜索到的字符串中的字符处于高亮</p>\n<h4 id=\"正则表达式的基础练习\"><a href=\"#正则表达式的基础练习\" class=\"headerlink\" title=\"正则表达式的基础练习\"></a>正则表达式的基础练习</h4><p>以<code>grep</code>命令为例（在linux文件系统下文件处理都是以行为单位，建议大家找一个方便浏览的文本来在脚本中实践）</p>\n<p><code>grep -n &#39;word&#39; /filename</code><br>查找filename文件中所有含有word的字符串（一行）,并显示行号</p>\n<p><code>grep -in &#39;word&#39; /filename</code> 查找filname文件中所有含有word的字符串，并显示行号，且不区分word大小写，</p>\n<p><code>grep -v &#39;word&#39; ／filename</code> 在filename中找出不含有word的字符串</p>\n<p>以上貌似没有涉及到正则，大家不要急，只是为了让大家先熟悉一下grep命令。同时-i,-v,-n等参数都可以自由组合</p>\n<h4 id=\"正则表达式的常用特殊符号（务必记住）\"><a href=\"#正则表达式的常用特殊符号（务必记住）\" class=\"headerlink\" title=\"正则表达式的常用特殊符号（务必记住）\"></a>正则表达式的常用特殊符号（务必记住）</h4><p>[:alnum:] 表示a..zA..Z0-9，即所有的字母数字</p>\n<p>查找所有字母数字的字符串<code>grep -n [[:alnum:]] /filename</code><br>以下使用方式类似，需要将特殊符号放入”[]”中才能被识别</p>\n<p>[:alpha:] 表示a..zA..Z，所有的字母</p>\n<p>[:upper:] 表示A..Z，所有的大写字母</p>\n<p>[:lower:] 表示a..z，所有的小写字母</p>\n<p>[:digit:] 表示0-9，所有的数字</p>\n<p>当然以上符号在应用的时候表示都为单个字符</p>\n<h5 id=\"利用符号”-”来查找字符集合\"><a href=\"#利用符号”-”来查找字符集合\" class=\"headerlink\" title=\"利用符号”[]”来查找字符集合\"></a>利用符号”[]”来查找字符集合</h5><p><code>grep -n &#39;a[a-z]&#39; /filename</code> 符号”[]”中只能选择一个字符，即该命令 查找的是以a开头，a..z之间任意一个字符结尾的字符串，并显示行号</p>\n<h5 id=\"利用符号”-”来查找字符串\"><a href=\"#利用符号”-”来查找字符串\" class=\"headerlink\" title=\"利用符号”[^]”来查找字符串\"></a>利用符号”[^]”来查找字符串</h5><p><code>grep -n &#39;[^a]aa&#39; /filename</code> 符号”[^]”代表的是不取^后的字符，该命令查找的是 不以a开头的,但其后跟有aa的字符串(baa之类)，并显示行号</p>\n<h5 id=\"利用符号”-”来查找字符串-1\"><a href=\"#利用符号”-”来查找字符串-1\" class=\"headerlink\" title=\"利用符号”.”来查找字符串\"></a>利用符号”.”来查找字符串</h5><p><code>grep -n &#39;a..&#39; /filename</code> 符号”.”代表的是任意字符，该命令查找的是以a开头，其后跟有两个任意字符的字符串(abc、aaa,abb之类)，并显示行号</p>\n<h5 id=\"利用符号”-”来查找字符串-2\"><a href=\"#利用符号”-”来查找字符串-2\" class=\"headerlink\" title=\"利用符号”*”来查找字符串\"></a>利用符号”*”来查找字符串</h5><p><code>grep -n &#39;aa* /filename</code> 符号”*”代表的是0个或者无穷多个的重复字符，该命令查找的是至少含有一个a的字符串，并显示行号</p>\n<h5 id=\"利用符号”-”或者符号”-”查找字符串\"><a href=\"#利用符号”-”或者符号”-”查找字符串\" class=\"headerlink\" title=\"利用符号”^”或者符号”$”查找字符串\"></a>利用符号”^”或者符号”$”查找字符串</h5><p><code>grep -n &#39;^a&#39; /filename</code> 符号”^”单独拿出来则代表行首，与”[^]”不同，请注意区分，该命令查找的是以a开头的字符串。</p>\n<p><code>grep -n &#39;a$&#39; /filename</code> 符号”$”表示行尾。该命令查找的是以a结尾的字符串。</p>\n<h5 id=\"利用符号”-”查找范围字符串\"><a href=\"#利用符号”-”查找范围字符串\" class=\"headerlink\" title=\"利用符号”{}”查找范围字符串\"></a>利用符号”{}”查找范围字符串</h5><p>因为”{“ “}”在shell 中拥有特殊意义，所以使用的时候需要利用转义字符”\\“来让命令解释器识别{}</p>\n<p><code>grep -n &#39;a\\{2,5\\}&#39; /filename</code> 符号”{}”查找的是一个范围内的字符串，该命令查找的是2-5个连续a的字符串</p>\n<blockquote>\n<p>基于以上基本的正则操作，需要多加练习，多得进行组合操作才能够熟能生巧</p>\n</blockquote>\n","categories":[{"name":"linux","slug":"linux","count":4,"path":"api/categories/linux.json"}],"tags":[{"name":"linux","slug":"linux","count":4,"path":"api/tags/linux.json"}]}