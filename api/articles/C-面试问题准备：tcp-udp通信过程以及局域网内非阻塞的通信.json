{"title":"C++面试问题准备：tcp/udp通信过程以及局域网内非阻塞的通信","slug":"C-面试问题准备：tcp-udp通信过程以及局域网内非阻塞的通信","date":"2018-03-11T04:52:45.000Z","updated":"2018-03-11T06:12:39.000Z","comments":true,"path":"api/articles/C-面试问题准备：tcp-udp通信过程以及局域网内非阻塞的通信.json","photos":[],"link":"","excerpt":"TCP和UDP协议的特点TCP支持面向链接的传输服务（相当于人们打电话，需要先建立一个用来传输双方信息的链接）支持字节流的传输（流模式 stream socket）支持全双工通信（允许通信双方的应用程序在任何时候都可以发送数据）支持建立多个并发的TCP链接支持可靠的传输服务（提供确认／重传与拥塞控制功能）","covers":["/images/tcp.png","/images/tcpThree.png","/images/udp.png","/images/result.png"],"content":"<h2 id=\"TCP和UDP协议的特点\"><a href=\"#TCP和UDP协议的特点\" class=\"headerlink\" title=\"TCP和UDP协议的特点\"></a>TCP和UDP协议的特点</h2><p><strong><font color=\"#DC143C\">TCP</font></strong></p>\n<ul>\n<li>支持面向链接的传输服务（相当于人们打电话，需要先建立一个用来传输双方信息的链接）</li>\n<li>支持字节流的传输（流模式 stream socket）</li>\n<li>支持全双工通信（允许通信双方的应用程序在任何时候都可以发送数据）</li>\n<li>支持建立多个并发的TCP链接</li>\n<li>支持可靠的传输服务（提供确认／重传与拥塞控制功能）<a id=\"more\"></a></li>\n</ul>\n<p><strong><font color=\"#DC143C\">UDP</font></strong></p>\n<ul>\n<li>无连接、不可靠的传输层协议<ol>\n<li>UDP协议在传输报文之前不需要在通信双方之间建立连接，因此减少了协议开销与传输延迟</li>\n<li>UDP对报文除了提供一种可选的校验和之外，几乎没有提供其他的保证数据传输可靠性的措施</li>\n<li>如果UDP协议检测处收到的分组出错，它就丢弃这个分组，既不确认，也不通知发送端和要求重传</li>\n</ol>\n</li>\n<li>面向报文（数据报模式 datagram socket）<ol>\n<li>UDP协议对于提交的报文，在添加了UDP头部，构成一个TPDU之后就向下提交给IP层</li>\n<li>UDP协议对应用程序提交的报文既不合并，也不拆分，而是保留原报文的长度与格式。</li>\n<li>对于UDP提交的报文长度应该设置合理，太短会使协议开销太大；太长，则UDP向IP层提交的TPDU可能在IP层会被分片，这样也会降低协议效率。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"TCP和UDP通信实现\"><a href=\"#TCP和UDP通信实现\" class=\"headerlink\" title=\"TCP和UDP通信实现\"></a>TCP和UDP通信实现</h2><p><strong><font color=\"#DC143C\">TCP</font></strong></p>\n<p><img src=\"/images/tcp.png\" alt=\"\"></p>\n<blockquote>\n<p>三次握手:<br>1.客户端发送一个syn段（同步序号）指明客户打算连接的服务器端口，以及初始化序号(ISN)，同时客户端进入”SYN-SEND”（状态）<br>2.服务器发回包含服务器的初始序号的SYN报文段作为应答。同时，将确认序号(ACK)设置为客户的ISN加1以对客户的SYN 报文段进行确认，同时服务端进入”SYN-RCVD”状态<br>3.客户必须将确认序号设置为服务器的ISN加1以对服务器的SYN报文段进行确认。此时客户端进入”ESTABLISHED”，而且服务端在接收到”ACK”报文之后也进入”ESTABLISHED”</p>\n</blockquote>\n<p><img src=\"/images/tcpThree.png\" alt=\"\"></p>\n<p>TCP编程的服务器端一般步骤是： </p>\n<ul>\n<li>创建一个socket，用函数socket()； </li>\n<li>设置socket属性，用函数setsockopt(); 可选</li>\n<li>绑定IP地址、端口等信息到socket上，用函数bind(); </li>\n<li>开启监听，用函数listen()； </li>\n<li>接收客户端上来的连接，用函数accept()； </li>\n<li>收发数据，用函数send()和recv()，或者read()和write(); </li>\n<li>关闭网络连接； </li>\n<li>关闭监听；</li>\n</ul>\n<p>TCP编程的客户端一般步骤是： </p>\n<ul>\n<li>创建一个socket，用函数socket()； </li>\n<li>设置socket属性，用函数setsockopt();* 可选 </li>\n<li>绑定IP地址、端口等信息到socket上，用函数bind();* 可选 </li>\n<li>设置要连接的对方的IP地址和端口等属性； </li>\n<li>连接服务器，用函数connect()； </li>\n<li>收发数据，用函数send()和recv()，或者read()和write(); </li>\n<li>关闭网络连接；</li>\n</ul>\n<p><strong><font color=\"#DC143C\">UDP</font></strong></p>\n<p><img src=\"/images/udp.png\" alt=\"\"></p>\n<p>UDP编程的服务器端一般步骤是： </p>\n<ul>\n<li>创建一个socket，用函数socket()； </li>\n<li>设置socket属性，用函数setsockopt();* 可选 </li>\n<li>绑定IP地址、端口等信息到socket上，用函数bind(); </li>\n<li>循环接收数据，用函数recvfrom(); </li>\n<li>关闭网络连接；</li>\n</ul>\n<p>UDP编程的客户端一般步骤是： </p>\n<ul>\n<li>创建一个socket，用函数socket()； </li>\n<li>设置socket属性，用函数setsockopt();* 可选 </li>\n<li>绑定IP地址、端口等信息到socket上，用函数bind();* 可选 </li>\n<li>设置对方的IP地址和端口等属性; </li>\n<li>发送数据，用函数sendto(); </li>\n<li>关闭网络连接</li>\n</ul>\n<p><strong><font color=\"#DC143C\">TCP 连接实现代码</font></strong></p>\n<p>server</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;//包含socket函数使用的各种协议族，send(),recv()  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;//调用linux系统函数的头文件(read(),write(),send()，select())  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORT 7000  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IP <span class=\"meta-string\">\"127.0.0.1\"</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> s;  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">servaddr</span>;</span>  </span><br><span class=\"line\"><span class=\"keyword\">socklen_t</span> len;  </span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; li;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getConn</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> conn = accept(s, (struct sockaddr*)&amp;servaddr, &amp;len);<span class=\"comment\">//第二个参数保存客户端套接字对应的IP地址和port 端口信息  </span></span><br><span class=\"line\">        li.push_back(conn);  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, conn);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv</span>;</span>  </span><br><span class=\"line\">    tv.tv_sec = <span class=\"number\">2</span>;  </span><br><span class=\"line\">    tv.tv_usec = <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(it=li.begin(); it!=li.end(); ++it)&#123;  </span><br><span class=\"line\">            fd_set rfds;  </span><br><span class=\"line\">            FD_ZERO(&amp;rfds);  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> maxfd = <span class=\"number\">0</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> retval = <span class=\"number\">0</span>;  </span><br><span class=\"line\">            FD_SET(*it, &amp;rfds);  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maxfd &lt; *it)&#123;  </span><br><span class=\"line\">                maxfd = *it;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            retval = select(maxfd+<span class=\"number\">1</span>, &amp;rfds, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);<span class=\"comment\">//实现非阻塞式的通信，即需要等待时间的发生，一旦执行一定返回，返回的结果不同以表示函数执行的结果  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(retval == <span class=\"number\">-1</span>)&#123;  </span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"select error\\n\"</span>);  </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(retval == <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>];  </span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span> ,<span class=\"keyword\">sizeof</span>(buf));  </span><br><span class=\"line\">                <span class=\"keyword\">long</span> len = recv(*it, buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"number\">0</span>);  </span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, buf);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMess</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>];  </span><br><span class=\"line\">        fgets(buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"built_in\">stdin</span>);<span class=\"comment\">//从文件流读取一行，送到缓冲区，使用时注意以下几点  </span></span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(it=li.begin(); it!=li.end(); ++it)&#123;  </span><br><span class=\"line\">            send(*it, buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"number\">0</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    s = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;servaddr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(servaddr));  </span><br><span class=\"line\">    servaddr.sin_family = AF_INET;  </span><br><span class=\"line\">    servaddr.sin_port = htons(PORT);  </span><br><span class=\"line\">    servaddr.sin_addr.s_addr = inet_addr(IP);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bind(s, (struct sockaddr* ) &amp;servaddr, <span class=\"keyword\">sizeof</span>(servaddr))==<span class=\"number\">-1</span>) &#123;  </span><br><span class=\"line\">        perror(<span class=\"string\">\"bind\"</span>);  </span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(listen(s, <span class=\"number\">20</span>) == <span class=\"number\">-1</span>) &#123;  </span><br><span class=\"line\">        perror(<span class=\"string\">\"listen\"</span>);  </span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    len = <span class=\"keyword\">sizeof</span>(servaddr);  </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">t</span><span class=\"params\">(getConn)</span></span>;  </span><br><span class=\"line\">    t.detach();  </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(sendMess)</span></span>;  </span><br><span class=\"line\">    t1.detach();  </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">t2</span><span class=\"params\">(getData)</span></span>;  </span><br><span class=\"line\">    t2.detach();  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>client</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MYPORT  7000  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFFER_SIZE 1024  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> sock_cli;  </span><br><span class=\"line\">    fd_set rfds;  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv</span>;</span><span class=\"comment\">//设置时间  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> retval, maxfd;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">///定义sockfd  </span></span><br><span class=\"line\">    sock_cli = socket(AF_INET,SOCK_STREAM, <span class=\"number\">0</span>);  </span><br><span class=\"line\">    <span class=\"comment\">///定义sockaddr_in  </span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">servaddr</span>;</span>  </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;servaddr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(servaddr));  </span><br><span class=\"line\">    servaddr.sin_family = AF_INET;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">1024</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;  </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"输入想要建立连接的端口号以及IP地址:\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a);  </span><br><span class=\"line\">    getchar();  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s);  </span><br><span class=\"line\">    servaddr.sin_port = htons(a);  <span class=\"comment\">///服务器端口，利用htons将主机字节顺序转换为网路字节数序从而进行数据包的传送  </span></span><br><span class=\"line\">    servaddr.sin_addr.s_addr = inet_addr(s);  <span class=\"comment\">///服务器ip  </span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">//连接服务器，成功返回0，错误返回-1  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (connect(sock_cli, (struct sockaddr *)&amp;servaddr, <span class=\"keyword\">sizeof</span>(servaddr)) &lt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        perror(<span class=\"string\">\"connect\"</span>);  </span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">        <span class=\"comment\">/*把可读文件描述符的集合清空*/</span>  </span><br><span class=\"line\">        FD_ZERO(&amp;rfds);  </span><br><span class=\"line\">        <span class=\"comment\">/*把标准输入的文件描述符加入到集合中*/</span>  </span><br><span class=\"line\">        FD_SET(<span class=\"number\">0</span>, &amp;rfds);  </span><br><span class=\"line\">        maxfd = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"comment\">/*把当前连接的文件描述符加入到集合中*/</span>  </span><br><span class=\"line\">        FD_SET(sock_cli, &amp;rfds);  </span><br><span class=\"line\">        <span class=\"comment\">/*找出文件描述符集合中最大的文件描述符*/</span>  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maxfd &lt; sock_cli)  </span><br><span class=\"line\">            maxfd = sock_cli;  </span><br><span class=\"line\">        <span class=\"comment\">/*设置超时时间*/</span>  </span><br><span class=\"line\">        tv.tv_sec = <span class=\"number\">5</span>;  </span><br><span class=\"line\">        tv.tv_usec = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"comment\">/*等待聊天*/</span>  </span><br><span class=\"line\">        retval = select(maxfd+<span class=\"number\">1</span>, &amp;rfds, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);<span class=\"comment\">//int select(int maxfdp,fd_set *readfds,fd_set *writefds,fd_set *errorfds,struct timeval*timeout);  监视我们需要的文件的文件描述符的变化情况——读写或是异常  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(retval == <span class=\"number\">-1</span>)&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"select出错，客户端程序退出\\n\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(retval == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//超时  </span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"客户端没有任何输入信息，并且服务器也没有信息到来，waiting...\\n\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//文件可进行读写或者出错  </span></span><br><span class=\"line\">            <span class=\"comment\">/*服务器发来了消息*/</span>  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(FD_ISSET(sock_cli,&amp;rfds))&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">char</span> recvbuf[BUFFER_SIZE];  </span><br><span class=\"line\">                <span class=\"keyword\">long</span> len;  </span><br><span class=\"line\">                len = recv(sock_cli, recvbuf, <span class=\"keyword\">sizeof</span>(recvbuf),<span class=\"number\">0</span>);  </span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, recvbuf);  </span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(recvbuf, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(recvbuf));  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"comment\">/*用户输入信息了,开始处理信息并发送*/</span>  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(FD_ISSET(<span class=\"number\">0</span>, &amp;rfds))&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">char</span> sendbuf[<span class=\"number\">1024</span>];  </span><br><span class=\"line\"><span class=\"comment\">//                scanf(\"%s\",sendbuf);  </span></span><br><span class=\"line\">                fgets(sendbuf, <span class=\"keyword\">sizeof</span>(sendbuf), <span class=\"built_in\">stdin</span>);  </span><br><span class=\"line\">                send(sock_cli, sendbuf, <span class=\"built_in\">strlen</span>(sendbuf),<span class=\"number\">0</span>); <span class=\"comment\">//发送  </span></span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(sendbuf, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sendbuf));  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    close(sock_cli);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在终端下分别编译运行结果显示如下：</p>\n<p><img src=\"/images/result.png\" alt=\"\"></p>\n<blockquote>\n<p>安利一个函数，<code>int select(int maxfdp,fd_set *readfds,fd_set *writefds,fd_set *errorfds,struct timeval *timeout);</code>.也是以上程序用到的函数。<br>因为在TCP通信中所用到的accept(),connect(),recv(),send()函数都是阻塞式通信（虽然阻塞的概念是针对S端,但是我们在建立连接后都可以作为发送端和接受端，所以这个概念是可以用在这里的），即我必须在这里等待我的调用结果，也就是如果S端没有发送信息，我的进程就会一直等待，直到recv()可以接受到结果才开始继续运行。<br>但是select()函数确可以让我们进行不用等待的通信，即程或线程执行此函数时不必非要等待接受消息。一旦该函数执行肯定返回，以返回值的不同来反映函数的执行情况，如果有接受到消息则与阻塞方式相同，若没有接收到消息则返回一个代码来告知事件未发生，而进程或线程继续执行。它的最后一个参数可以用来作为超时检测，即很长时间没有信息互动，那么接受端会弹出一条信息来告知目前你没有发送信息，是否发送端出现传输问题。</p>\n</blockquote>\n","categories":[{"name":"面试","slug":"面试","count":29,"path":"api/categories/面试.json"}],"tags":[{"name":"网络通信","slug":"网络通信","count":1,"path":"api/tags/网络通信.json"}]}