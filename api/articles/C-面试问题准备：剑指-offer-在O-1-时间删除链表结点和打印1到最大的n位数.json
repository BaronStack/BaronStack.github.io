{"title":"C++面试问题准备：剑指 offer--在O(1)时间删除链表结点和打印1到最大的n位数","slug":"C-面试问题准备：剑指-offer-在O-1-时间删除链表结点和打印1到最大的n位数","date":"2018-03-10T05:12:36.000Z","updated":"2018-03-10T09:08:08.000Z","comments":true,"path":"api/articles/C-面试问题准备：剑指-offer-在O-1-时间删除链表结点和打印1到最大的n位数.json","photos":[],"link":"","excerpt":"在O(1)时间内删除链表结点题目描述：给定单向链表的头指针和一个结点指针，定义一个函数在O(1)时间删除该结点在单向链表中删除一个结点最常规的做法无疑是从链表的头结点开始，顺序遍历查找要删除的结点，并在链表中删除该结点。","covers":["/images/deleteList.jpg"],"content":"<h2 id=\"在O-1-时间内删除链表结点\"><a href=\"#在O-1-时间内删除链表结点\" class=\"headerlink\" title=\"在O(1)时间内删除链表结点\"></a>在O(1)时间内删除链表结点</h2><blockquote>\n<p>题目描述：给定单向链表的头指针和一个结点指针，定义一个函数在O(1)时间删除该结点</p>\n</blockquote>\n<p>在单向链表中删除一个结点最常规的做法无疑是从链表的头结点开始，顺序遍历查找要删除的结点，并在链表中删除该结点。<a id=\"more\"></a></p>\n<p>但是这种删除方式需要遍历整个链表，时间复杂度为O（n）.</p>\n<p>为了获得O(1)的时间复杂度，我们可以使用如下方法：</p>\n<p><img src=\"/images/deleteList.jpg\" alt=\"\"></p>\n<p><strong><font color=\"#DC143C\">把结点j的内容覆盖结点i,接下来把结点i的next指向j的下一个结点之后删除结点j。这样就不需要遍历出结点i的上一个结点。</font></strong></p>\n<blockquote>\n<p>注意问题：如果链表中只有一个结点，而我们要删除的结点就是头结点，删除之后还需要把链表的头结点设置为NULL。如果存在多个链表结点，要删除的结点在链表尾部，我们可以先找到该结点的前序结点，并完成删除操作。</p>\n</blockquote>\n<p>代码如下:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> deleteNode(listNode * head,listNode  toBeDeleted) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head || !toBeDeleted)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"comment\">//覆盖</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (toBeDeleted -&gt; <span class=\"keyword\">next</span> != <span class=\"keyword\">NULL</span>) &#123;</span><br><span class=\"line\">        listNode * pNext = toBeDeleted -&gt; <span class=\"keyword\">next</span>;</span><br><span class=\"line\">        toBeDeleted -&gt; value = pNext -&gt; value;</span><br><span class=\"line\">        toBeDeleted -&gt; <span class=\"keyword\">next</span> = pNext -&gt; <span class=\"keyword\">next</span>;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> pNext;</span><br><span class=\"line\">        pNext = <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//头结点是要被删除的</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (head == toBeDeleted) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> toBeDeleted;</span><br><span class=\"line\">        head = <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        listNode * pNext = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pNext -&gt; <span class=\"keyword\">next</span> != toBeDeleted)</span><br><span class=\"line\">            pNext = pNext -&gt; <span class=\"keyword\">next</span>;</span><br><span class=\"line\">        pNext -&gt; <span class=\"keyword\">next</span> = <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> toBeDeleted;</span><br><span class=\"line\">        toBeDeleted = <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打印1到最大的n位数\"><a href=\"#打印1到最大的n位数\" class=\"headerlink\" title=\"打印1到最大的n位数\"></a>打印1到最大的n位数</h3><blockquote>\n<p>题目描述：输入数字n,按照顺序打印出从1到最大的n位十进制数。比如输入3，则打印出1、2、3一直到最大的3位数即999。</p>\n</blockquote>\n<p>这是一个较大的陷阱，如果说我们不去考虑数据大范围那就很容易，但是无论是long还是long long，都有可能产生溢出，所以最好的办法是利用字符串实现大数加。</p>\n<p>用字符串表示数字的时候，最直观的方法就是字符串里每个字符都是’0’到’9’之间的某个字符，用来表示数字中的一位。因为数字最大是n位的，因此我们需要一个长度为n+1的字符串（字符串中最后一个是结束符号’\\0’），当实际数字不够n位的时候，在字符串的前半部分补0。</p>\n<p>因此我们要做的是两件事：一是在字符串表达的数字上模拟加法，二是把字符串表达的数字打印出来。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数increment（）实现在数字上增加1</span></span><br><span class=\"line\"><span class=\"comment\">// 函数printNumber（）实现打印字符串数字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printToMaxOfNDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *number = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(number ,<span class=\"string\">'0'</span> ,n);</span><br><span class=\"line\">    number[n] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!increment(number))</span><br><span class=\"line\">        printNumber(number);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> []number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">increment</span><span class=\"params\">(<span class=\"keyword\">char</span> * number)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isOverflow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nTakeOver = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nLength = <span class=\"built_in\">strlen</span>(number);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = nLength - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nSum = number[i] - <span class=\"string\">'0'</span> + nTakeOver;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == nLength - <span class=\"number\">1</span>)</span><br><span class=\"line\">            nSum ++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nSum &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                isOverflow = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                nSum -= <span class=\"number\">10</span>;</span><br><span class=\"line\">                nTakeOver = <span class=\"number\">1</span>;</span><br><span class=\"line\">                number[i] = <span class=\"string\">'0'</span> + nSum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            number[i] = <span class=\"string\">'0'</span> + nSum;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isOverflow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印的时候注意阅读习惯，不打印前导0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printNumber</span><span class=\"params\">(<span class=\"keyword\">char</span> * number)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isBegining0 = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nLength = <span class=\"built_in\">strlen</span>(number);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nLength; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBeginning0 &amp;&amp; number[i] != <span class=\"string\">'0'</span>)</span><br><span class=\"line\">            isBeginning0 = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isBeginning0)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,number[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"面试","slug":"面试","count":30,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":24,"path":"api/tags/C.json"}]}