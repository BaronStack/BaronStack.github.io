{"title":"Tensorflow 训练变量的存储与加载","slug":"Tensorflow-训练变量的存储与加载","date":"2018-01-23T13:23:20.000Z","updated":"2018-01-23T13:47:36.000Z","comments":true,"path":"api/articles/Tensorflow-训练变量的存储与加载.json","photos":[],"link":"","excerpt":"TF代码本篇主要讲的是利用TensorFlow将我们训练好的变量(Weights 和 biases 或者loss…)存储下来，下次训练加载这次的存储","covers":["/images/TensorflowImages/store.png","/images/TensorflowImages/restore.png"],"content":"<p><a href=\"https://github.com/BaronStack/tensorflow_learning/tree/master/莫烦TensorflowProgram_Learning/implement_store_and_restore_saver\" target=\"_blank\" rel=\"noopener\">TF代码</a></p>\n<h4 id=\"本篇主要讲的是利用TensorFlow将我们训练好的变量-Weights-和-biases-或者loss…-存储下来，下次训练加载这次的存储\"><a href=\"#本篇主要讲的是利用TensorFlow将我们训练好的变量-Weights-和-biases-或者loss…-存储下来，下次训练加载这次的存储\" class=\"headerlink\" title=\"本篇主要讲的是利用TensorFlow将我们训练好的变量(Weights 和 biases 或者loss…)存储下来，下次训练加载这次的存储 \"></a>本篇主要讲的是利用TensorFlow将我们训练好的变量(Weights 和 biases 或者loss…)存储下来，下次训练加载这次的存储 <a id=\"more\"></a></h4><p>存储主要利用函数<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save_path = saver.save(sess, <span class=\"string\">\"my_net/save_net.ckpt\"</span>)<span class=\"comment\">#定义变量结果的存储位置,可放在程序最后位置</span></span><br></pre></td></tr></table></figure></p>\n<p>存储结果运行如下（运行代码build_new_network.py）结果如下，<strong>该结果显示的是误差，即预测结果与真实结果之间的误差，越小说明预测结果约精确</strong>：</p>\n<p><img src=\"/images/TensorflowImages/store.png\" alt=\"\"></p>\n<p>加载主要利用函数：<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">saver = tf.train.Saver()</span><br><span class=\"line\">sess = tf.Session() <span class=\"comment\">#需要先定义Session()</span></span><br><span class=\"line\">saver.restore(sess, <span class=\"string\">\"my_net/save_net.ckpt\"</span>) <span class=\"comment\">#从存储目录加载加载</span></span><br></pre></td></tr></table></figure></p>\n<p>加载运行结果如下（运行代码build_network_restore.py，这个代码和上一个代码的功能一样，注意：<strong>变量初始化函数</strong>在加载的时候不需要添加），结果如下：</p>\n<p><img src=\"/images/TensorflowImages/restore.png\" alt=\"\"></p>\n<p>可以看到虽然并没又从上一个结果紧跟着开始运行，而训练依旧可以认为是接着上一次的运行结果开始训练</p>\n","categories":[{"name":"tensor flow","slug":"tensor-flow","count":3,"path":"api/categories/tensor-flow.json"}],"tags":[{"name":"machine learning","slug":"machine-learning","count":3,"path":"api/tags/machine-learning.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"}]}