{"title":"C++面试问题准备：多线程还是多进程的选择以及区别","slug":"C-面试问题准备：多线程还是多进程的选择以及区别","date":"2018-03-04T12:27:20.000Z","updated":"2018-03-05T09:42:35.000Z","comments":true,"path":"api/articles/C-面试问题准备：多线程还是多进程的选择以及区别.json","photos":[],"link":"","excerpt":"进程和线程的区别一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某进程内的线程在其它进程不可见调度和切换：线程上下文切换比进程上下文切换要快得多","covers":["/images/moreIPC.png"],"content":"<h2 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h2><ul>\n<li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li>\n<li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某进程内的线程在其它进程不可见</li>\n<li>调度和切换：线程上下文切换比进程上下文切换要快得多<a id=\"more\"></a>\n</li>\n</ul>\n<p><strong>进程几种状态</strong>：</p>\n<p>创建态：进程正在创建，操作系统在创建进程时要进行的工作包括分配和建立进程控制块表项、建立资源表格并分配资源、加载程序并建立地址空间。</p>\n<p>就绪态：时间片被用完，此线程被强制暂停，等待下一个属于它的时间片到来</p>\n<p>运行态：此线程正在执行，正在占用时间片</p>\n<p>阻塞：也叫等待状态，等待某一事件（如IO或另一个线程）执行完</p>\n<p>退出：进程已结束，所以也称结束状态，释放操作系统分配的资源。</p>\n<p><strong>线程几种状态</strong>：</p>\n<p>创建：一个新的线程被创建，等待该线程被调用执行  </p>\n<p>就绪：时间片已用完，此线程被强制暂停，等待下一个属于他的时间片到来  </p>\n<p>运行：此线程正在执行，正在占用时间片  </p>\n<p>阻塞：也叫等待状态，等待某一事件(如IO或另一个线程)执行完  </p>\n<p>退出：一个线程完成任务或者其他终止条件发生，该线程终止进入退出状态，退出状态释放该线程所分配的资源</p>\n<blockquote>\n<p><strong><font color=\"#DC143C\">线程共享的资源</font></strong>:<br> a. 堆：堆是在进程空间中开辟出来的，所以它是理所当然地被共享的。因此由malloc和new出来的都是共享的<br> b. 全局变量：它是与具体某一函数无关的，所以也与特定线程无关；因此也是共享的<br> c. 静态变量：即使是局部变量，在该局部变量存在的函数对于整个程序生存期间只有一份拷贝；因此也是共享的<br> d. 文件等公用资源：这个是共享的，使用这些公共资源的线程必须同步。windows下存在的几种线程同步资源的方式：信号、临界区、事件、互斥体<br> <strong><font color=\"#DC143C\">线程独享的资源</font></strong>:<br> a. 线程ID:每个线程都有自己的线程ID，这个ID在本进程中是唯一的。进程用此来标识线程。<br> b. 寄存器组的值:由于线程间是并发运行的，每个线程有自己不同的运行线索，当从一个线程切换到另一个线程上时，必须将原有的线程的寄存器集合的状态保存，以便将来该线程在被重新切换到时能得以恢复。<br> c. 线程的堆栈:<font color=\"#DC143C\">堆栈是保证线程独立运行所必须的.</font>线程函数可以调用函数，而被调用函数中又是可以层层嵌套的，所以线程 必须拥有自己的函数堆栈，使得函数调用可以正常执行，不受其他线程的影响。<br> d. 错误返回码:由于同一个进程中有很多个线程在同时运行，可能某个线程进行系统调用 后设置了errno值，而在该线程还没有处理这个错误，另外一个线程就在此时被调度器投入运行，这样错误值就有可能被修改<br> e. 线程的信号屏蔽码:由于每个线程所感兴趣的信号不同，所以线程的信号屏蔽码应该由线程自己管理。但所有的线程都共享同样的信号处理器<br> f. 线程的优先级:由于线程需要像进程那样能够被调度，那么就必须要有可供调度使用的参数，这个参数就是线程的优先级</p>\n</blockquote>\n<h2 id=\"多进程-和多线程的区别\"><a href=\"#多进程-和多线程的区别\" class=\"headerlink\" title=\"多进程 和多线程的区别\"></a>多进程 和多线程的区别</h2><blockquote>\n<p>进程是资源分配的最小单位，线程是CPU调度的最小单位。 <!--more--></p>\n</blockquote>\n<p>关于多进程和多线程的区别可以参考如下图：</p>\n<p><img src=\"/images/moreIPC.png\" alt=\"\"></p>\n<h2 id=\"多进程和多线程的选择\"><a href=\"#多进程和多线程的选择\" class=\"headerlink\" title=\"多进程和多线程的选择\"></a>多进程和多线程的选择</h2><p><strong><font color=\"#DC143C\">需频繁创建销毁的优先用线程</font></strong></p>\n<p>这种原则最常见的应用就是Web服务器了，来一个连接建立一个线程，断了就销毁线程，要是用进程，创建和销毁的代价是很难承受的</p>\n<p><strong><font color=\"#DC143C\">需要进行大量计算的优先使用线程</font></strong></p>\n<p>大量计算当然就是要耗费很多CPU，切换频繁了，这种情况下线程是最合适的，一般应用在：图像处理和算法处理。</p>\n<p><strong><font color=\"#DC143C\">强相关的处理用线程，弱相关的处理用进程</font></strong></p>\n<p>一般的Server需要完成如下任务：消息收发、消息处理。“消息收发”和“消息处理”就是弱相关的任务，而“消息处理”里面可能又分为“消息解码”、“业务处理”，这两个任务相对来说相关性就要强多了。因此“消息收发”和“消息处理”可以分进程设计，“消息解码”、“业务处理”可以分线程设计。</p>\n","categories":[{"name":"面试","slug":"面试","count":18,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":16,"path":"api/tags/C.json"}]}