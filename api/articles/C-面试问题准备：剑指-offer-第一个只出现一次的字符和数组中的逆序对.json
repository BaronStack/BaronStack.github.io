{"title":"C++面试问题准备：剑指 offer--第一个只出现一次的字符和数组中的逆序对","slug":"C-面试问题准备：剑指-offer-第一个只出现一次的字符和数组中的逆序对","date":"2018-03-10T06:53:12.000Z","updated":"2018-03-10T09:08:00.000Z","comments":true,"path":"api/articles/C-面试问题准备：剑指-offer-第一个只出现一次的字符和数组中的逆序对.json","photos":[],"link":"","excerpt":"第一个只出现一次的字符题目描述：在字符中找出第一个只出现一次的字符。例如输入”abaccdeff”,则输出”b”;看到这个题目我们最直接的想法是从头到尾扫描这个字符串，当访问到某个字符时拿这个字符和后面的每个字符进行比较，如果在后面没有出现该字符，那么这个字符就是所要求的。但是每个字符都要与后面O(n)个字符进行比较，这样时间复制度就为o(n^2);","covers":["/images/nixu01.jpg","/images/nixu02.jpg"],"content":"<h2 id=\"第一个只出现一次的字符\"><a href=\"#第一个只出现一次的字符\" class=\"headerlink\" title=\"第一个只出现一次的字符\"></a>第一个只出现一次的字符</h2><blockquote>\n<p>题目描述：在字符中找出第一个只出现一次的字符。例如输入”abaccdeff”,则输出”b”;</p>\n</blockquote>\n<p>看到这个题目我们最直接的想法是从头到尾扫描这个字符串，当访问到某个字符时拿这个字符和后面的每个字符进行比较，如果在后面没有出现该字符，那么这个字符就是所要求的。但是每个字符都要与后面O(n)个字符进行比较，这样时间复制度就为o(n^2);<a id=\"more\"></a></p>\n<p>由于题目与出现字符的次数相关，我们便可以统计每个字符在该字符串中出现的次数？要达到这个目的，我们需要一个数据容器来存放每个字符出现的次数。在这个容器中，我们可以根据字符来查找它出现的次数，也就是这个容器的作用是把一个字符映射为一个数字。而哈希表就是这样一个容器。</p>\n<p>由于SGI STL中还未添加hash table，我们需要考虑自己去实现。字符是一个长度为8的数据类型，因此总共需要256种可能，于是我们创建一个长度为256的数组，每个字母根据其ASCII码值作为数组的下标对应数组的一个数字，而数组中存储的是每个字符出现的次数。这样我们就创建了一个大小为256，以字符ASCII码为键值的哈希表。</p>\n<p><strong><font color=\"#DC143C\">第一次扫描时，在哈希表中更新一个字符出现的次数的时间是O(1)。如果字符串长度为n,那么第一次扫描的时间复杂度是O(n)。第二个扫描时，同样O(1)能读出一个字符出现的次数，所以时间复杂度仍然是O(n)。这样算起来总的时间复杂度是O(n)。</font></strong></p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">firstNotRepeatingChar</span><span class=\"params\">(<span class=\"keyword\">char</span> * pString)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pString == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> tableSize = <span class=\"number\">256</span>;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hashTable[tableSize];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tableSize; ++i)</span><br><span class=\"line\">        hashTable[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *hashKey = pString;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*(hashKey) != <span class=\"string\">'\\0'</span>)<span class=\"comment\">//O(n)</span></span><br><span class=\"line\">        hashTable[*(hashKey ++)] ++;</span><br><span class=\"line\">    hashKey = pString;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*(hashKey) != <span class=\"string\">'\\0'</span>) &#123;<span class=\"comment\">//O(n)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashTable[*hashKey] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *hashKey;</span><br><span class=\"line\">        hashKey ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\0'</span>;<span class=\"comment\">//没有出现一次的返回空</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组中的逆序对\"><a href=\"#数组中的逆序对\" class=\"headerlink\" title=\"数组中的逆序对\"></a>数组中的逆序对</h2><blockquote>\n<p>题目描述：在数组中的两个数字如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数字，求出这个数组中的逆序对的总数。</p>\n</blockquote>\n<p>刚看到这个题目的时候我们的第一反应是，从头到尾扫描这个数组，访问到某个数字的时候遍历后面的数字是否满足逆序对的条件，并让逆序对的总数加一。这样的话每个数字都要和O（n）个数字比较，最后这个算法时间复杂度是O(n^2).</p>\n<p>此时为了降低时间复杂度，我们不能拿一个数字和其后的数字进行比较,我们可以让相邻的两个数字进行比较。</p>\n<p>如下：</p>\n<p><img src=\"/images/nixu01.jpg\" alt=\"\"></p>\n<p>我们先把数组分解成两个长度为 2的子数组，再把这两个子数组分别拆分成两个长度为 1 的子数组。接下来一边合并相邻的子数组，一边统计逆序对的数目。在第一对长度为 1 的子数组{7}、{5}中7大于5，因此（7,5）组成一个逆序对。同样在第二对长度为1的子数组{6}、{4}中也有逆序对（6,4）。由于我们已经统计了这两对子数组内部的逆序对，因此需要把这两对子数组排序（如上图所示），以免在以后的统计过程中再重复统计。</p>\n<p><img src=\"/images/nixu02.jpg\" alt=\"\"></p>\n<p>接下来对第一张图d合并过程细分，如上图我们先用两个指针分别指向两个子数组的末尾，并每次比较两个指针指向的数字。如果第一个子数组中的数字大于第二个子数组中的数字，则构成逆序对，并且逆序对的数目等于第二个子数组中剩余数字的个数（如图（a）和图（c）所示）。如果第一个数组中的数字小于或等于第二个数组中的数字，则不构成逆序对（如图（b）所示）。每一次比较的时候，我们都把较大的数字从后往前复制到一个辅助数组中去，确保辅助数组中的数字是递增排序的。在把较大的数字复制到辅助数组之后，把对应的指针向前移动一位，接下来进行下一轮比较。</p>\n<p>最后总结如下:</p>\n<p><strong><font color=\"#DC143C\">先把数组分隔成子数组，先统计出子数组内部的逆序对数目，然后再统计出两个相邻子数组之间的逆序对数目。在统计逆序对的过程中，还需要对数组进行排序，当然很明显这个排序的过程是归并排序</font></strong></p>\n<p>代码如下：</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> inverseParis(<span class=\"built_in\">int</span> *<span class=\"keyword\">data</span>, <span class=\"built_in\">int</span> length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">data</span> == NULL || length &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> *copy = <span class=\"keyword\">data</span>;</span><br><span class=\"line\">    for (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; length; ++i)</span><br><span class=\"line\">        copy[i] = <span class=\"keyword\">data</span>[i];</span><br><span class=\"line\">    <span class=\"built_in\">int</span> <span class=\"built_in\">count</span> = inverseParisCore(<span class=\"keyword\">data</span>, copy, <span class=\"number\">0</span>, lenght -<span class=\"number\">1</span>);</span><br><span class=\"line\">    delete copy[];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">count</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> inverseParisCore(<span class=\"built_in\">int</span> * <span class=\"keyword\">data</span>, <span class=\"built_in\">int</span> *copy, <span class=\"built_in\">int</span> start, <span class=\"built_in\">int</span> <span class=\"keyword\">end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == <span class=\"keyword\">end</span>) &#123;</span><br><span class=\"line\">        copy[start] = <span class=\"keyword\">data</span>[start];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"built_in\">int</span> length = (<span class=\"keyword\">end</span> - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"built_in\">int</span> left = inverseParisCore(copy,<span class=\"keyword\">data</span>,start,length);</span><br><span class=\"line\">   <span class=\"built_in\">int</span> right = inverseParisCore(copy,<span class=\"keyword\">data</span>,start + length + <span class=\"number\">1</span>, <span class=\"keyword\">end</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">int</span> i = start + length;</span><br><span class=\"line\">   <span class=\"built_in\">int</span> j = <span class=\"keyword\">end</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">int</span> copyIndex = <span class=\"keyword\">end</span>;</span><br><span class=\"line\">   <span class=\"built_in\">int</span> <span class=\"built_in\">count</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(i &gt;= start &amp;&amp; j &gt;= start + length + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">data</span>[i] &gt; <span class=\"keyword\">data</span>[j]) &#123;</span><br><span class=\"line\">            copy[copyIndex --] = <span class=\"keyword\">data</span>[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"built_in\">count</span> += j - start - length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            copy[copyIndex --] = <span class=\"keyword\">data</span>[j--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   for (; i &gt;= start; --i)</span><br><span class=\"line\">        copy[copyIndex --] = <span class=\"keyword\">data</span>[i];</span><br><span class=\"line\">   for (; j &gt;= start + length + <span class=\"number\">1</span>; --j)</span><br><span class=\"line\">        copy[copyIndex --] = <span class=\"keyword\">data</span>[j];</span><br><span class=\"line\">        </span><br><span class=\"line\">   retrun <span class=\"built_in\">count</span>;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><font color=\"#DC143C\">归并排序算法代码如下</font></strong></p>\n</blockquote>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> mergeSort(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> <span class=\"built_in\">end</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">if</span> (a == NULL || (<span class=\"built_in\">end</span> - start) &lt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">if</span> ((<span class=\"built_in\">end</span> - start) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">if</span> (a[start] &gt; a[<span class=\"built_in\">end</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = a[start];</span><br><span class=\"line\">            a[start] = a[<span class=\"built_in\">end</span>];</span><br><span class=\"line\">            a[<span class=\"built_in\">end</span>] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (<span class=\"built_in\">end</span> + start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        merge_sort(a, start,mid);</span><br><span class=\"line\">        merge_sort(a, mid + <span class=\"number\">1</span>, <span class=\"built_in\">end</span>);</span><br><span class=\"line\">        merge(a,start,mid,<span class=\"built_in\">end</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Merge(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q, <span class=\"keyword\">int</span> r)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n1 = q-p+<span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n2 = r-q;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> *L = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n1+<span class=\"number\">1</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> *R = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n2+<span class=\"number\">1</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, k;  </span><br><span class=\"line\">    <span class=\"comment\">//创建两个子数组，并将左右区间内的值分别复制进去</span></span><br><span class=\"line\">    <span class=\"built_in\">for</span> (i=<span class=\"number\">0</span>; i&lt;n1; i++)&#123;  </span><br><span class=\"line\">        L[i] = a[p+i];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">for</span> (j=<span class=\"number\">0</span>; j&lt;n2; j++)&#123;  </span><br><span class=\"line\">        R[j] = a[q+j+<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    L[n1] = <span class=\"number\">10000000</span>;  </span><br><span class=\"line\">    R[n2] = <span class=\"number\">10000000</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//合并</span></span><br><span class=\"line\">    <span class=\"built_in\">for</span> (i=<span class=\"number\">0</span>, j=<span class=\"number\">0</span>, k=p; k&lt;=r; k++)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">if</span> (L[i]&lt;=R[j])  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            a[k] = L[i];  </span><br><span class=\"line\">            i++;  </span><br><span class=\"line\">        &#125;<span class=\"built_in\">else</span>&#123;  </span><br><span class=\"line\">            a[k] = R[j];  </span><br><span class=\"line\">            j++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">delete</span> []L;  </span><br><span class=\"line\">    <span class=\"keyword\">delete</span> []R;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"面试","slug":"面试","count":21,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":19,"path":"api/tags/C.json"}]}