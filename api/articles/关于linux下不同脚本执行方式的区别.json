{"title":"关于linux下不同脚本执行方式的区别","slug":"关于linux下不同脚本执行方式的区别","date":"2018-01-16T12:42:41.000Z","updated":"2018-02-22T12:54:00.000Z","comments":true,"path":"api/articles/关于linux下不同脚本执行方式的区别.json","photos":[],"link":"","excerpt":"Linux系统下常见的脚本执行方式有source scriptsh script./script","covers":["/images/sh03Cross.jpg"],"content":"<p>Linux系统下常见的脚本执行方式有</p>\n<ul>\n<li>source script</li>\n<li>sh script</li>\n<li>./script<a id=\"more\"></a>\n其实执行方式相差不多的是第二种和第三种<br><code>sh script</code>和<code>./script</code>执行过程中都会使用一个新的bash（linux系统默认的脚本，当然还有csh,sh,zsh,tcsh,ksh等)<br>来执行脚本中的命令，也就是说<strong>script是在子进程的bash内执行的，当然在子进程执行结束后，进程中的各项变量和操作是不会传回到父进程</strong></li>\n</ul>\n<p>然而用<code>source script</code>来执行，那么结果就不一样了，source命令使得script的执行方式在父进程中执行，因此各项操作会在原本的bash中生效，<br>这也就是为什么要使得写入~/.bashrc中的设置生效需要使用命令source</p>\n<p>各位可以编写这样一个脚本来尝试一下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#Program:</span></span><br><span class=\"line\"><span class=\"comment\">#       Users input 2 numbers,the program will input them.</span></span><br><span class=\"line\"><span class=\"comment\">#History:</span></span><br><span class=\"line\"><span class=\"comment\">#2018/01/16     Vigor   First Release</span></span><br><span class=\"line\">PATH=/home/vigor/bin:/home/vigor/.<span class=\"built_in\">local</span>/bin:/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class=\"built_in\">local</span>/games:/snap/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"You need to input 2 numbers,i will cross them\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">\"first number:\"</span> firstnum</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">\"second number:\"</span> secnum</span><br><span class=\"line\"></span><br><span class=\"line\">total=$((<span class=\"variable\">$firstnum</span>*<span class=\"variable\">$secnum</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nThe result of <span class=\"variable\">$firstnum</span> x <span class=\"variable\">$secnum</span> is ==&gt; <span class=\"variable\">$total</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p>将该脚本命名为sh03.sh，保存之后修改执行权限为所有用户可执行<br><code>chmod a+x sh03.sh</code></p>\n<p>利用直接执行方式，即上面提到的后两种都可以来运行看看，<br>然后再用source执行脚本看看结果</p>\n<p><img src=\"/images/sh03Cross.jpg\" alt=\"\"><br><img src=\"/images/sh03Source.jpg\" alt=\"\"></p>\n<p>很明显能够看到在脚本中我们对变量total进行了赋值，但是利用<code>./script</code>执行之后在原来的脚本中total是空值，相反<br>利用<code>source</code>执行之后却可以在原来的脚本看到total的值。显然，利用source是在父进程中执行，而其他两种是在子进程中执行。</p>\n","categories":[{"name":"linux","slug":"linux","count":4,"path":"api/categories/linux.json"}],"tags":[{"name":"linux","slug":"linux","count":7,"path":"api/tags/linux.json"},{"name":"shell","slug":"shell","count":1,"path":"api/tags/shell.json"}]}