{"title":"const和static关键字","slug":"C-面试问题准备：const和static关键字","date":"2018-01-31T01:51:41.000Z","updated":"2018-03-14T13:21:03.000Z","comments":true,"path":"api/articles/C-面试问题准备：const和static关键字.json","photos":[],"link":"","excerpt":"常量 （const）const类型值不能被修改，这里指的是const修饰的内容不能被修改，且const修饰的常量在超出其作用域之后会被释放","covers":null,"content":"<h2 id=\"常量-（const）\"><a href=\"#常量-（const）\" class=\"headerlink\" title=\"常量 （const）\"></a>常量 （const）</h2><ul>\n<li><p>const类型值不能被修改，这里指的是const修饰的内容不能被修改，且const修饰的常量在超出其作用域之后会被释放 <a id=\"more\"></a></p>\n</li>\n<li><p>在类中：const数据成员只在某个对象生存期是常量，而类可以创建很多的对象，所以不同对象类的const数据成员是可以不同的.</p>\n</li>\n<li><p>在类中：const数据成员的初始化只能在类的构造函数的初始化列表中进行。因为类的对象没有被创建时，编译器是不知道const数据成员的值是什么。</p>\n</li>\n</ul>\n<blockquote>\n<p>这里针对常量指针(int <em>const p)、指针常量(const int </em> p)、指向常量的常量指针(const int * const p)之间的区别做一个描述</p>\n</blockquote>\n<p>阐述一个概念</p>\n<p><strong>顶层const</strong> :表示指针本身是一个常量（我们知道指针代表的一个地址，即此时这个地址是const，不能改变）</p>\n<p><strong>底层const</strong> :表示指针的指向是一个常量（此时我们知道指针代表的地址所指的内容是常量）</p>\n<p>综上：</p>\n<h4 id=\"const-int-p\"><a href=\"#const-int-p\" class=\"headerlink\" title=\"const int* p\"></a><strong>const int* p</strong></h4><p> 可以通过*来看p的修饰成分，此时*的右边没有限定成分，那p就是一个普通的指针。而*的左边是<code>const int</code>，那么此时p的指向是一个常量，此时的const 是底层const.可以不用初始化</p>\n<p> 同时我们可以通过改变其地址来改变其所指的内容，但是不能直接更改其所指的内容。</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d = <span class=\"number\">200</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span>* p = &amp;i;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">p = &amp;d; <span class=\"comment\">//只能通过修改p的指向来更改p的内容</span></span><br><span class=\"line\">*p = d;<span class=\"comment\">//error!read-only variable is not assignable</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output:</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"int-const-p\"><a href=\"#int-const-p\" class=\"headerlink\" title=\"int* const p\"></a><strong>int* const p</strong></h4><p>此时*号的左边是const,那么说明该指针p是一个常量指针，即p的指向的地址是不能变的，但是我们可以更改其地址的内容。此时const是顶层const,而顶层 const必须初始化（总不可能让常量指针变量存储的是一个空内容）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* <span class=\"keyword\">const</span> p = &amp;i;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t*p = d;<span class=\"comment\">//直接更改其指向地址的内容</span></span><br><span class=\"line\">\t<span class=\"comment\">// p = &amp;d;//不能更改其指向的地址 ERROR:ariable 'p' declared const here</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output :</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"const-int-const-p\"><a href=\"#const-int-const-p\" class=\"headerlink\" title=\"const int* const p\"></a><strong>const int* const p</strong></h4><p>*左边和右边都有const ,那么这个常量指针指向的是一个常量，所以语法是前两者的结合，显然地址和值都无法更改，真正做到了常量！</p>\n<h2 id=\"静态变量-static\"><a href=\"#静态变量-static\" class=\"headerlink\" title=\"静态变量(static)\"></a>静态变量(static)</h2><ul>\n<li><p>在类中：static变量是属于类的，不属于某个对象，它在整个程序的运行过程中只有一个副本，因此不能在定义对象时 对变量进行初始化，就是不能用构造函数进行初始化。初始化时在类外：数据类型 类名::静态数据成员名=值；static 成员函数作为类作用域的全局函数，不能访问类的非静态成员，没有this指针，不能被声明为virtual</p>\n</li>\n<li><p>全局静态变量：作用域内的所有函数都可以调用，一般可以用来做多线程程序的控制。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i  = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    i ++;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output :</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>局部静态变量：同样该变量的内存在编译时只被分配一次，到整个程序结束的时候释放</li>\n</ul>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> i  = <span class=\"number\">100</span><span class=\"comment\">;</span></span><br><span class=\"line\">    i ++<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> main ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> a = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span>;</span></span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; endl<span class=\"comment\">;</span></span><br><span class=\"line\">    a = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span>;</span></span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; endl<span class=\"comment\">;</span></span><br><span class=\"line\">    a = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span>;</span></span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; endl<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output :</span><br><span class=\"line\"><span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">102</span></span><br><span class=\"line\"><span class=\"number\">103</span></span><br></pre></td></tr></table></figure>\n<p><strong><font color=\"#DC143C\" size=\"6\">补充:</font></strong></p>\n<p><font color=\"#DC143C\">static关键字至少有下列n个作用</font>：<br>（1）函数体内static变量的作用范围为该函数体，不同于auto变量，该变量的内存只被分配一次，因此其值在下次调用时仍维持上次的值；<br>（2）在模块内的static全局变量可以被模块内所用函数访问，但不能被模块外其它函数访问；<br>（3）在模块内的static函数只可被这一模块内的其它函数调用，这个函数的使用范围被限制在声明它的模块内；<br>（4）在类中的static成员变量属于整个类所拥有，对类的所有对象只有一份拷贝；<br>（5）在类中的static成员函数属于整个类所拥有，这个函数不接收this指针，因而只能访问类的static成员变量。    </p>\n<p><font color=\"#DC143C\">const关键字至少有下列n个作用</font>：<br>（1）欲阻止一个变量被改变，可以使用const关键字。在定义该const变量时，通常需要对它进行初始化，因为以后就没有机会再去改变它了；<br>（2）对指针来说，可以指定指针本身为const，也可以指定指针所指的数据为const，或二者同时指定为const；<br>（3）在一个函数声明中，const可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值；<br>（4）对于类的成员函数，若指定其为const类型，则表明其是一个常函数，不能修改类的 成员变量；<br>（5）对于类的成员函数，有时候必须指定其返回值为const类型，以使得其返回值不为“左值”</p>\n","categories":[{"name":"面试","slug":"面试","count":36,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"}]}