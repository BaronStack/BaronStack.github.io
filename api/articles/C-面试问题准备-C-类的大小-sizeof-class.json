{"title":"sizeof(class)的大小","slug":"C-面试问题准备-C-类的大小-sizeof-class","date":"2018-03-11T06:18:40.000Z","updated":"2018-03-14T13:33:27.000Z","comments":true,"path":"api/articles/C-面试问题准备-C-类的大小-sizeof-class.json","photos":[],"link":"","excerpt":"空类的大小 [Figure] 为什么空的什么都没有是1呢？","covers":["/images/emptyClass.png","/images/generalNo.png","/images/virtualNo.png","/images/virtualExtend.png","/images/staticVariable.png"],"content":"<h3 id=\"空类的大小\"><a href=\"#空类的大小\" class=\"headerlink\" title=\"空类的大小\"></a>空类的大小</h3><p><img src=\"/images/emptyClass.png\" alt=\"\"></p>\n<p>为什么空的什么都没有是1呢？<a id=\"more\"></a></p>\n<blockquote>\n<p>类的实例化就是在内存中分配一块地址，每个实例在内存中都有独一无二的地址。同样空类也会被实例化，所以编译器会给空类隐含的添加一个字节，这样空类实例化之后就有了独一无二的地址了。所以空类的sizeof为1。</p>\n</blockquote>\n<h3 id=\"一般非空类大小\"><a href=\"#一般非空类大小\" class=\"headerlink\" title=\"一般非空类大小\"></a>一般非空类大小</h3><p><img src=\"/images/generalNo.png\" alt=\"\"></p>\n<blockquote>\n<p>编译器为类中的数据成员分配一定的存储空间。实例化时类的地址拥有指向将数据成员的空间。同时因为内存对齐，所以该类的大小就是16(我电脑是64位系统，char * 大小为8字节)</p>\n</blockquote>\n<p>这里简单提一下32位和64位机器中数据类型的长度大小的不同</p>\n<p>32位：</p>\n<ul>\n<li>char 1个字节</li>\n<li>short 2个字节</li>\n<li>int 4个字节</li>\n<li>long 4个字节</li>\n<li>long long 8个字节</li>\n<li>指针  4个字节</li>\n</ul>\n<p>64位：</p>\n<ul>\n<li>char 1个字节</li>\n<li>short 2个字节</li>\n<li>int 4个字节</li>\n<li>long 8个字节</li>\n<li><font color=\"#DC143C\">long long 8个字节</font></li>\n<li><font color=\"#DC143C\">指针 8个字节</font>\n\n</li>\n</ul>\n<h3 id=\"有虚函数的类\"><a href=\"#有虚函数的类\" class=\"headerlink\" title=\"有虚函数的类\"></a>有虚函数的类</h3><p><img src=\"/images/virtualNo.png\" alt=\"\"></p>\n<blockquote>\n<p>这里类中如果有虚函数，编译器在类实例化的时候会创建一个虚函数表。所以此时该类实例的大小又多了一个指向虚函数表的指针。</p>\n</blockquote>\n<h3 id=\"有虚函数类的继承\"><a href=\"#有虚函数类的继承\" class=\"headerlink\" title=\"有虚函数类的继承\"></a>有虚函数类的继承</h3><p><img src=\"/images/virtualExtend.png\" alt=\"\"></p>\n<blockquote>\n<p>可见子类的大小是本身成员变量的大小加上父类的大小。</p>\n</blockquote>\n<h3 id=\"拥有静态变量的类\"><a href=\"#拥有静态变量的类\" class=\"headerlink\" title=\"拥有静态变量的类\"></a>拥有静态变量的类</h3><p><img src=\"/images/staticVariable.png\" alt=\"\"></p>\n<blockquote>\n<p>看到添加了静态变量的显示结果是和上一个显示的结果一样的。因为static变量对于整个类只有一份拷贝，且静态成员被编译器放在内存空间的全局存储区，但是在类实例化的时候只为类中的成员变量分配存储空间，所以它不会影响类的大小。</p>\n</blockquote>\n","categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"}]}