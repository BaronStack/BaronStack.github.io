{"title":"面向对象的基本原则","slug":"C-面试问题准备：面向对象的基本原则","date":"2018-02-04T13:47:31.000Z","updated":"2018-03-14T13:24:36.000Z","comments":true,"path":"api/articles/C-面试问题准备：面向对象的基本原则.json","photos":[],"link":"","excerpt":"关于面向对象的五个基本原则：单一职责原则开放封闭原则Liskov替换原则依赖导致原则接口隔离原则","covers":null,"content":"<p>关于面向对象的五个基本原则：</p>\n<ul>\n<li>单一职责原则</li>\n<li>开放封闭原则</li>\n<li>Liskov替换原则</li>\n<li>依赖导致原则</li>\n<li>接口隔离原则<a id=\"more\"></a></li>\n</ul>\n<h3 id=\"单一职责原则（Single-Resposibility-Principle）\"><a href=\"#单一职责原则（Single-Resposibility-Principle）\" class=\"headerlink\" title=\"单一职责原则（Single-Resposibility Principle）\"></a>单一职责原则（Single-Resposibility Principle）</h3><ul>\n<li>一个类应该仅有一个引起它变化的原因(最简单，最容易理解却最不容易做到的一个设计原则)</li>\n</ul>\n<p>单一职责原则可以看做是低耦合、高内聚在面向原则上的引申，以提高内聚性来减少引起变化的原因</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Add</span> : <span class=\"title\">JiSuanQi</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2</span>) : <span class=\"title\">base</span>(<span class=\"params\">n1,n2</span>)</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">JiSuan</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Number1 + <span class=\"keyword\">this</span>.Number2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//减法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sub</span> : <span class=\"title\">JiSuanQi</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sub</span>(<span class=\"params\"><span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2</span>) : <span class=\"title\">base</span>(<span class=\"params\">n1,n2</span>)</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">JiSuan</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Number1 - <span class=\"keyword\">this</span>.Number2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>职员类例子：比如在职员类里，将工程师、销售人员、销售经理这些情况都放在职员类里考虑，其结果将会非常混乱，在这个假设下，职员类里的每个方法都要if else判断是哪种情况，从类结构上来说将会十分臃肿，并且上述三种的职员类型，不论哪一种发生需求变化，都会改变职员类！这个是大家所不愿意看到的！</p>\n<h3 id=\"开放封闭原则（Open-Closed-principle）\"><a href=\"#开放封闭原则（Open-Closed-principle）\" class=\"headerlink\" title=\"开放封闭原则（Open-Closed principle）\"></a>开放封闭原则（Open-Closed principle）</h3><ul>\n<li>软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。因为修改程序可能会造成错误，不能修改，但是可以添加新的功能</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类似于上面的计算器，对于要添加的功能就添加一个类，然后只修改下面的switch就可以了</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> JiSuanQi <span class=\"title\">GetJiSuanObject</span>(<span class=\"params\"><span class=\"keyword\">int</span> n1,<span class=\"keyword\">string</span> czf,<span class=\"keyword\">int</span> n2</span>) </span>&#123;</span><br><span class=\"line\">    JiSuanQi jsq = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(czf) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"+\"</span> :</span><br><span class=\"line\">                jsq = <span class=\"keyword\">new</span> Add(n1,n2);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"-\"</span> :</span><br><span class=\"line\">                jsq = <span class=\"keyword\">new</span> Sub(n1,n2);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"/\"</span> :</span><br><span class=\"line\">                jsq = <span class=\"keyword\">new</span> div(n1,n2);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsq;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Liskov替换原则（Liskov-Substituion-Principle）\"><a href=\"#Liskov替换原则（Liskov-Substituion-Principle）\" class=\"headerlink\" title=\"Liskov替换原则（Liskov-Substituion Principle）\"></a>Liskov替换原则（Liskov-Substituion Principle）</h3><ul>\n<li>子类必须能够替换其基类</li>\n</ul>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//上例中子类能够替换父类，而父类不能替换子类</span></span><br><span class=\"line\">JisuanQi jsp=<span class=\"keyword\">new</span> <span class=\"type\">Add</span>(n1,n2);</span><br></pre></td></tr></table></figure>\n<p>这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础</p>\n<blockquote>\n<p>如果子类不能完整实现父类的方法，或者父类的某些方法在子类中已经发生”畸变”，则建议断开父子继承关系，采用依赖、聚集、组合等关系代替继承。正如上面的基类JisuanQi，若我们要实现一个功能为模拟大数运算，则该类就无法继承计算器类，那么只能采用组合了</p>\n</blockquote>\n<p><strong>最佳实践：在项目中采用liskov替换原则时尽量避免子类的”个性”，一旦子类有”个性”，这个子类和父类之间的关系就很难调和了，把子类当作父类使用，子类的”个性”被抹杀；把子类单独作为一个业务来使用，则会让代码间的耦合关系变得破朔迷离。</strong></p>\n<h3 id=\"依赖倒置原则（Dependecy-Inversion-Principle）\"><a href=\"#依赖倒置原则（Dependecy-Inversion-Principle）\" class=\"headerlink\" title=\"依赖倒置原则（Dependecy-Inversion Principle）\"></a>依赖倒置原则（Dependecy-Inversion Principle）</h3><ul>\n<li>高层模块不应该依赖于底层模块，两者都应该依赖其<strong>抽象</strong></li>\n<li>抽象不应该依赖细节</li>\n<li>细节应该依赖抽象</li>\n</ul>\n<blockquote>\n<p>即可以理解为面向接口编程</p>\n</blockquote>\n<p>采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，减少并发引起的风险，提高代码的可读性和可维护性</p>\n<h3 id=\"接口隔离原则（Interface-Segregation-Principle）\"><a href=\"#接口隔离原则（Interface-Segregation-Principle）\" class=\"headerlink\" title=\"接口隔离原则（Interface-Segregation Principle）\"></a>接口隔离原则（Interface-Segregation Principle）</h3><ul>\n<li>使用多个小的专门的接口，而不要使用一个大的总接口</li>\n</ul>\n<p>就是每一个接口都执行一个专门的功能，用什么调什么。这样可以提高代码的灵活性，还可以降低类间的耦合性。提高稳定性。</p>\n","categories":[{"name":"面试","slug":"面试","count":35,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"}]}