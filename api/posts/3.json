{"total":82,"pageSize":10,"pageCount":9,"data":[{"title":"sizeof(class)的大小","slug":"C-面试问题准备-C-类的大小-sizeof-class","date":"2018-03-11T06:18:40.000Z","updated":"2018-03-14T13:33:27.000Z","comments":true,"path":"api/articles/C-面试问题准备-C-类的大小-sizeof-class.json","excerpt":"<h3 id=\"空类的大小\"><a href=\"#空类的大小\" class=\"headerlink\" title=\"空类的大小\"></a>空类的大小</h3><p><img src=\"/images/emptyClass.png\" alt=\"\"></p>\n<p>为什么空的什么都没有是1呢？","keywords":null,"cover":"/images/emptyClass.png","content":null,"text":"空类的大小 [Figure] 看到添加了静态变量的显示结果是和上一个显示的结果一样的。因为static变量对于整个类只有一份拷贝，且静态成员被编译器放在内存空间的全局存储区，但是在类实例化的时候只为类中的成员变量分配存储空间，所以它不会影响类的大小。","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"}]},{"title":"tcp/udp通信过程以及局域网内非阻塞的通信","slug":"C-面试问题准备：tcp-udp通信过程以及局域网内非阻塞的通信","date":"2018-03-11T04:52:45.000Z","updated":"2018-03-14T13:21:03.000Z","comments":true,"path":"api/articles/C-面试问题准备：tcp-udp通信过程以及局域网内非阻塞的通信.json","excerpt":"<h2 id=\"TCP和UDP协议的特点\"><a href=\"#TCP和UDP协议的特点\" class=\"headerlink\" title=\"TCP和UDP协议的特点\"></a>TCP和UDP协议的特点</h2><p><strong><font color=\"#DC143C\">TCP</font></strong></p>\n<ul>\n<li>支持面向链接的传输服务（相当于人们打电话，需要先建立一个用来传输双方信息的链接）</li>\n<li>支持字节流的传输（流模式 stream socket）</li>\n<li>支持全双工通信（允许通信双方的应用程序在任何时候都可以发送数据）</li>\n<li>支持建立多个并发的TCP链接</li>\n<li>支持可靠的传输服务（提供确认／重传与拥塞控制功能）","keywords":null,"cover":"/images/tcp.png","content":null,"text":"TCP和UDP协议的特点TCP支持面向链接的传输服务（相当于人们打电话，需要先建立一个用来传输双方信息的链接）支持字节流的传输（流模式 stream socket）支持全双工通信（允许通信双方的应用程序在任何时候都可以发送数据）支持建立多个并发的TCP链接支持可靠的传输服务（提供","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"网络通信","slug":"网络通信","count":1,"path":"api/tags/网络通信.json"}]},{"title":"阻塞和非阻塞、同步和异步","slug":"C-面试问题准备：阻塞和非阻塞、同步和异步","date":"2018-03-10T14:11:46.000Z","updated":"2018-03-14T13:23:16.000Z","comments":true,"path":"api/articles/C-面试问题准备：阻塞和非阻塞、同步和异步.json","excerpt":"<h2 id=\"同步和异步主要针对C端\"><a href=\"#同步和异步主要针对C端\" class=\"headerlink\" title=\"同步和异步主要针对C端\"></a>同步和异步主要针对C端</h2><h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a><strong><font color=\"#DC143C\">同步</font></strong></h3><p>所谓同步，就是在c端发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。","keywords":null,"cover":null,"content":null,"text":"同步和异步主要针对C端同步所谓同步，就是在c端发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。 例如普通B/S模式（同步）：提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事异步当","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"OS","slug":"OS","count":4,"path":"api/tags/OS.json"}]},{"title":"Linux下GDB命令调试程序","slug":"C-面试问题准备：Linux下GDB命令调试程序","date":"2018-03-10T12:46:32.000Z","updated":"2018-03-14T13:21:03.000Z","comments":true,"path":"api/articles/C-面试问题准备：Linux下GDB命令调试程序.json","excerpt":"<blockquote>\n<p>GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。<br> GDB中的命令固然很多，但我们只需掌握其中十个左右的命令，就大致可以完成日常的基本的程序调试工作</p>\n</blockquote>","keywords":null,"cover":"/images/linuxImages/vim.png","content":null,"text":"GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。<br> GDB中的命令固然很多，但我们只需掌握其中十个左右的命令，就大致可以完成日常的基本的程序调试工作 命令参数：file &lt;文件名&gt;：加载被调试的可执行程","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"linux","slug":"linux","count":7,"path":"api/tags/linux.json"}]},{"title":"剑指 offer--第一个只出现一次的字符和数组中的逆序对","slug":"C-面试问题准备：剑指-offer-第一个只出现一次的字符和数组中的逆序对","date":"2018-03-10T06:53:12.000Z","updated":"2018-03-14T13:23:16.000Z","comments":true,"path":"api/articles/C-面试问题准备：剑指-offer-第一个只出现一次的字符和数组中的逆序对.json","excerpt":"<h2 id=\"第一个只出现一次的字符\"><a href=\"#第一个只出现一次的字符\" class=\"headerlink\" title=\"第一个只出现一次的字符\"></a>第一个只出现一次的字符</h2><blockquote>\n<p>题目描述：在字符中找出第一个只出现一次的字符。例如输入”abaccdeff”,则输出”b”;</p>\n</blockquote>\n<p>看到这个题目我们最直接的想法是从头到尾扫描这个字符串，当访问到某个字符时拿这个字符和后面的每个字符进行比较，如果在后面没有出现该字符，那么这个字符就是所要求的。但是每个字符都要与后面O(n)个字符进行比较，这样时间复制度就为o(n^2);","keywords":null,"cover":"/images/nixu01.jpg","content":null,"text":"第一个只出现一次的字符题目描述：在字符中找出第一个只出现一次的字符。例如输入”abaccdeff”,则输出”b”;看到这个题目我们最直接的想法是从头到尾扫描这个字符串，当访问到某个字符时拿这个字符和后面的每个字符进行比较，如果在后面没有出现该字符，那么这个字符就是所要求的。但是每","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"}]},{"title":"剑指 offer--在O(1)时间删除链表结点和打印1到最大的n位数","slug":"C-面试问题准备：剑指-offer-在O-1-时间删除链表结点和打印1到最大的n位数","date":"2018-03-10T05:12:36.000Z","updated":"2018-03-14T13:23:16.000Z","comments":true,"path":"api/articles/C-面试问题准备：剑指-offer-在O-1-时间删除链表结点和打印1到最大的n位数.json","excerpt":"<h2 id=\"在O-1-时间内删除链表结点\"><a href=\"#在O-1-时间内删除链表结点\" class=\"headerlink\" title=\"在O(1)时间内删除链表结点\"></a>在O(1)时间内删除链表结点</h2><blockquote>\n<p>题目描述：给定单向链表的头指针和一个结点指针，定义一个函数在O(1)时间删除该结点</p>\n</blockquote>\n<p>在单向链表中删除一个结点最常规的做法无疑是从链表的头结点开始，顺序遍历查找要删除的结点，并在链表中删除该结点。","keywords":null,"cover":"/images/deleteList.jpg","content":null,"text":"在O(1)时间内删除链表结点题目描述：给定单向链表的头指针和一个结点指针，定义一个函数在O(1)时间删除该结点在单向链表中删除一个结点最常规的做法无疑是从链表的头结点开始，顺序遍历查找要删除的结点，并在链表中删除该结点。但是这种删除方式需要遍历整个链表，时间复杂度为O（n）.为了","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"}]},{"title":"2018-03-09","slug":"2018-03-09","date":"2018-03-09T15:46:27.000Z","updated":"2018-03-09T15:58:27.000Z","comments":true,"path":"api/articles/2018-03-09.json","excerpt":"<p>最近和她呆在一起的时间比较长，不过大多是在上自习。因为她要准备专八，我要准备找工作。但是今天她接受到了一个她前男友的快递，他送给她一条毛毯，说是看到西安有点冷。","keywords":null,"cover":null,"content":null,"text":"最近和她呆在一起的时间比较长，不过大多是在上自习。因为她要准备专八，我要准备找工作。但是今天她接受到了一个她前男友的快递，他送给她一条毛毯，说是看到西安有点冷。<br>是的，虽然她并没有答应我，但是我能感觉到她已经能够接受我了。只是看到这个快递，还是很难受，看到她的纠结犹豫了，我","link":"","raw":null,"photos":[],"categories":[{"name":"日记","slug":"life","count":33,"path":"api/categories/life.json"}],"tags":[]},{"title":"剑指 offer--从上往下打印和二叉搜索树的后序遍历序列","slug":"C-面试问题准备：剑指-offer-从上往下打印和二叉搜索树的后序遍历序列","date":"2018-03-08T12:20:51.000Z","updated":"2018-03-14T13:21:03.000Z","comments":true,"path":"api/articles/C-面试问题准备：剑指-offer-从上往下打印和二叉搜索树的后序遍历序列.json","excerpt":"<h2 id=\"从上往下打印二叉树\"><a href=\"#从上往下打印二叉树\" class=\"headerlink\" title=\"从上往下打印二叉树\"></a>从上往下打印二叉树</h2><blockquote>\n<p>题目描述：从上往下打印出二叉树的每个结点，同一层的结点按照从左到右的顺序打印。</p>\n</blockquote>\n<p>因为按层打印的顺序决定应该先打印根节点，所以我们从树的根节点开始分析。","keywords":null,"cover":"/images/printTree.jpg","content":null,"text":"从上往下打印二叉树题目描述：从上往下打印出二叉树的每个结点，同一层的结点按照从左到右的顺序打印。因为按层打印的顺序决定应该先打印根节点，所以我们从树的根节点开始分析。  [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"}]},{"title":"剑指-offer--合并两个排序链表和树的子结构","slug":"C-面试问题准备：剑指-offer-合并两个排序链表和树的子结构","date":"2018-03-07T11:59:45.000Z","updated":"2018-03-14T13:22:32.000Z","comments":true,"path":"api/articles/C-面试问题准备：剑指-offer-合并两个排序链表和树的子结构.json","excerpt":"<h2 id=\"合并两个排序链表\"><a href=\"#合并两个排序链表\" class=\"headerlink\" title=\"合并两个排序链表\"></a>合并两个排序链表</h2><blockquote>\n<p>输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然使按照递增排序的。</p>\n</blockquote>\n<p>常见问题：</p>\n<ul>\n<li>写代码之前没有对合并过程想清楚，最终合并出来的链表要么中间断开，要么没有做到递增排序</li>\n<li>代码的鲁棒性存在问题，程序有特殊输入会崩溃（输入空链表）","keywords":null,"cover":"/images/mergeList.png","content":null,"text":"合并两个排序链表输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然使按照递增排序的。常见问题：写代码之前没有对合并过程想清楚，最终合并出来的链表要么中间断开，要么没有做到递增排序代码的鲁棒性存在问题，程序有特殊输入会崩溃（输入空链表） [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"}]},{"title":"剑指 offer--链表中倒数第k个结点和合并反转链表","slug":"C-面试问题准备：剑指 offer-链表中倒数第k个结点和合并反转链表","date":"2018-03-07T11:07:47.000Z","updated":"2018-03-14T13:21:03.000Z","comments":true,"path":"api/articles/C-面试问题准备：剑指 offer-链表中倒数第k个结点和合并反转链表.json","excerpt":"<h2 id=\"链表中倒数第K个结点\"><a href=\"#链表中倒数第K个结点\" class=\"headerlink\" title=\"链表中倒数第K个结点\"></a>链表中倒数第K个结点</h2><blockquote>\n<p>问题描述：输入一个链表，输出该链表中倒数第K个结点。例如一个链表有6个结点，从头结点开始它们的值依次是1，2，3，4，5，6。这个链表的倒数第三个结点值为4。<br>","keywords":null,"cover":"/images/linkList.jpeg","content":null,"text":"链表中倒数第K个结点问题描述：输入一个链表，输出该链表中倒数第K个结点。例如一个链表有6个结点，从头结点开始它们的值依次是1，2，3，4，5，6。这个链表的倒数第三个结点值为4。<br>为了得到我们想要的结果，我们会很自然的想到假设这个链表有n个结点，那么倒数第k个结点就是从头结","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":37,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":25,"path":"api/tags/C.json"}]}]}