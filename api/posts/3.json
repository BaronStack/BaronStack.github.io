{"total":49,"pageSize":10,"pageCount":5,"data":[{"title":"2018-02-01","slug":"2018-02-01","date":"2018-02-01T11:33:08.000Z","updated":"2018-02-22T12:54:00.000Z","comments":true,"path":"api/articles/2018-02-01.json","excerpt":"<p>今天提着接近40公斤（25公斤的哑铃）的行李箱艰难回到了家，重点是在火车上一个无意识的打招呼，竟发现身边的年轻大哥是长安大学土木工程专业的研究生学长。","keywords":null,"cover":null,"content":null,"text":"今天提着接近40公斤（25公斤的哑铃）的行李箱艰难回到了家，重点是在火车上一个无意识的打招呼，竟发现身边的年轻大哥是长安大学土木工程专业的研究生学长。然后就与他相谈甚欢，从大学的点点滴滴到走上社会的艰难挫折，从行业发展到现在自身行业的举步维艰，学长给我讲了很多大学应该做的事情以及","link":"","raw":null,"photos":[],"categories":[{"name":"日记","slug":"life","count":24,"path":"api/categories/life.json"}],"tags":[]},{"title":"2018-01-31","slug":"2018-01-31","date":"2018-01-31T13:57:56.000Z","updated":"2018-02-22T12:54:00.000Z","comments":true,"path":"api/articles/2018-01-31.json","excerpt":"<p>今天是2018年1月的最后一天，而今天有一场月全食。其实有的时候人最幸福的事情就是有一个可以共享快乐的人，看着月亮一点一点被地球的太阳折射投影覆盖，变成一轮红月亮，过程真的很神奇，这里是一个关于此次超级蓝月和月全食的描述文章<a href=\"http://www.shangc.net/news/2018/0131/00222673.html\" target=\"_blank\" rel=\"noopener\">月全食</a>.","keywords":null,"cover":"/images/yongyong/farPhoto.jpg","content":null,"text":"今天是2018年1月的最后一天，而今天有一场月全食。其实有的时候人最幸福的事情就是有一个可以共享快乐的人，看着月亮一点一点被地球的太阳折射投影覆盖，变成一轮红月亮，过程真的很神奇，这里是一个关于此次超级蓝月和月全食的描述文章月全食.虽然她看不到有点可惜呀,不过当看到银白色的月光完","link":"","raw":null,"photos":[],"categories":[{"name":"日记","slug":"life","count":24,"path":"api/categories/life.json"}],"tags":[]},{"title":"C++面试问题准备：const和static关键字","slug":"C-面试问题准备：const和static关键字","date":"2018-01-31T01:51:41.000Z","updated":"2018-02-26T12:57:55.000Z","comments":true,"path":"api/articles/C-面试问题准备：const和static关键字.json","excerpt":"<h2 id=\"常量-（const）\"><a href=\"#常量-（const）\" class=\"headerlink\" title=\"常量 （const）\"></a>常量 （const）</h2><ul>\n<li><p>const类型值不能被修改，这里指的是const修饰的内容不能被修改，且const修饰的常量在超出其作用域之后会被释放","keywords":null,"cover":null,"content":null,"text":"常量 （const）const类型值不能被修改，这里指的是const修饰的内容不能被修改，且const修饰的常量在超出其作用域之后会被释放 在类中：const数据成员只在某个对象生存期是常量，而类可以创建很多的对象，所以不同对象类的const数据成员是可以不同的.在类中：cons","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":14,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"}]},{"title":"C++ 面试问题准备：内存分配的方式","slug":"C-面试问题准备：内存分配的方式","date":"2018-01-30T12:16:57.000Z","updated":"2018-02-22T12:54:00.000Z","comments":true,"path":"api/articles/C-面试问题准备：内存分配的方式.json","excerpt":"<h3 id=\"C-中常见内存分配及其存储区域有以下几种\"><a href=\"#C-中常见内存分配及其存储区域有以下几种\" class=\"headerlink\" title=\"C++ 中常见内存分配及其存储区域有以下几种\"></a>C++ 中常见内存分配及其存储区域有以下几种</h3><ul>\n<li>堆分配</li>\n<li>栈分配</li>\n<li>自由存储区</li>\n<li>静态存储区</li>\n<li>常量存储区","keywords":null,"cover":null,"content":null,"text":"C++ 中常见内存分配及其存储区域有以下几种堆分配栈分配自由存储区静态存储区常量存储区这里首先描述以下除了堆和栈的三种存储方式：自由存储区这个存储区是单独为C++ 中new运算符提出来的，该存储区是new和delete动态分配和释放对象的抽象概念。在《STL 源码剖析中》自由存储","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":14,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"}]},{"title":"2018-01-29","slug":"2018-01-29","date":"2018-01-29T12:14:13.000Z","updated":"2018-02-22T12:54:00.000Z","comments":true,"path":"api/articles/2018-01-29.json","excerpt":"<p>天哪，这也太难了吧！—-为我的脑细胞默哀30秒","keywords":null,"cover":null,"content":null,"text":"天哪，这也太难了吧！—-为我的脑细胞默哀30秒今天早上看了一早上的LSTM，对RNN结构终于有了点了解了（该模型也就是对序列化数据进行训练，训练过程是根据上一个的状态来对下一个状态产生影响，通过一系列的状态训练，得到它们结果的相关性，但是普通的RNN模型因为梯度爆炸（descen","link":"","raw":null,"photos":[],"categories":[{"name":"日记","slug":"life","count":24,"path":"api/categories/life.json"}],"tags":[]},{"title":"东方月初：你的梦想我帮你承担","slug":"东方月初：你的梦想我帮你承担","date":"2018-01-28T04:16:20.000Z","updated":"2018-02-22T12:54:00.000Z","comments":true,"path":"api/articles/东方月初：你的梦想我帮你承担.json","excerpt":"<h2 id=\"那一刻，你的背影如此高大\"><a href=\"#那一刻，你的背影如此高大\" class=\"headerlink\" title=\"那一刻，你的背影如此高大\"></a>那一刻，你的背影如此高大</h2><p><img src=\"/images/yongyong/beiying1.png\" alt=\"\"></p>\n<p>我叫东方月初，是东方灵族的人，","keywords":null,"cover":"/images/yongyong/beiying1.png","content":null,"text":"那一刻，你的背影如此高大 [Figure] 从此我们陷入世俗的漩涡，但我知道我们都为了同一个梦想时时刻刻在努力。所以我们最后在别人眼里的自相残杀，其实只是更好得掩盖我们最后的目的。时光流逝，我希望用自己的方式打开你内心的那个心结，没有什么理由，没有什么目的，只是想看到你发自心底的","link":"","raw":null,"photos":[],"categories":[{"name":"随笔","slug":"随笔","count":2,"path":"api/categories/随笔.json"}],"tags":[]},{"title":"C++面试问题准备：STL--allocator","slug":"C-开发面试准备：STL-allocator","date":"2018-01-27T15:02:40.000Z","updated":"2018-02-26T12:57:55.000Z","comments":true,"path":"api/articles/C-开发面试准备：STL-allocator.json","excerpt":"<blockquote>\n<p>最近在读侯捷老师的《STL源码剖析》，写写总结。他的STL主要是SGI 版本的，也就是我们常用的GCC编译器支持","keywords":null,"cover":null,"content":null,"text":"最近在读侯捷老师的《STL源码剖析》，写写总结。他的STL主要是SGI 版本的，也就是我们常用的GCC编译器支持 什么是allocator相信对C++感兴趣的伙伴肯定对STL这个模版库情有独钟，但是当站在STL的角度来看这些容器的实现那么第一个需要知道的就是allocatoral","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":14,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"}]},{"title":"C++开发面试问题","slug":"C-开发面试问题","date":"2018-01-26T14:47:27.000Z","updated":"2018-02-22T12:54:00.000Z","comments":true,"path":"api/articles/C-开发面试问题.json","excerpt":"<h4 id=\"语言基础\"><a href=\"#语言基础\" class=\"headerlink\" title=\"语言基础\"></a>语言基础</h4><ul>\n<li>OOP（封装、继承、多态） + V func 的实现，V table 的原理</li>\n<li>const static的各种情况，分清const pointer 和pointer to const以及两者合体的形式","keywords":null,"cover":null,"content":null,"text":"语言基础OOP（封装、继承、多态） + V func 的实现，V table 的原理const static的各种情况，分清const pointer 和pointer to const以及两者合体的形式内存泄漏 三条规则。注意exception safe和smart point","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":14,"path":"api/categories/面试.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"}]},{"title":"Python爬虫 爬取批量图片","slug":"Python爬虫-爬取批量图片","date":"2018-01-26T10:40:37.000Z","updated":"2018-02-22T12:54:00.000Z","comments":true,"path":"api/articles/Python爬虫-爬取批量图片.json","excerpt":"<p>本部分的主要代码在<br><a href=\"https://github.com/BaronStack/Python-Reptitle/tree/master/reptitle_trying\" target=\"_blank\" rel=\"noopener\">爬取批量图片到本地</a></p>\n<h4 id=\"如何用python-爬取图片网站的图片\"><a href=\"#如何用python-爬取图片网站的图片\" class=\"headerlink\" title=\"如何用python 爬取图片网站的图片\"></a>如何用python 爬取图片网站的图片</h4><blockquote>\n<p>这里的图片是按页显示的，所以它爬取的是每一页的图片</p>\n</blockquote>\n<ul>\n<li>获取网页链接</li>\n<li>利用正则提取以页为单位的html内容</li>\n<li>获取每一页中图片的存储链接</li>\n<li>利用循环下载保存","keywords":null,"cover":"/images/python/scrap_images.png","content":null,"text":"本部分的主要代码在<br>爬取批量图片到本地如何用python 爬取图片网站的图片这里的图片是按页显示的，所以它爬取的是每一页的图片获取网页链接利用正则提取以页为单位的html内容获取每一页中图片的存储链接利用循环下载保存导入的包如下：<br>1<br>2<br>3<br>4<b","link":"","raw":null,"photos":[],"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"},{"name":"爬虫","slug":"爬虫","count":1,"path":"api/tags/爬虫.json"}]},{"title":"2018-01-25","slug":"2018-01-25","date":"2018-01-25T01:57:43.000Z","updated":"2018-02-22T12:54:00.000Z","comments":true,"path":"api/articles/2018-01-25.json","excerpt":"<h5 id=\"向死而生：我修的死亡学分—–李开复\"><a href=\"#向死而生：我修的死亡学分—–李开复\" class=\"headerlink\" title=\"向死而生：我修的死亡学分—–李开复\"></a>向死而生：我修的死亡学分—–李开复</h5><p>昨天晚上开始读这本书，内心一直很纠结。","keywords":null,"cover":null,"content":null,"text":"向死而生：我修的死亡学分—–李开复昨天晚上开始读这本书，内心一直很纠结。虽然我现在并没有取得像李开复这样的专业成果，但是当我想出这个问题的一瞬间我知道我是急功近利的。李开复在事业的最顶峰，人生的最高点遇到了淋巴癌第四期，因为他过于繁杂的工作压力以及对自己近乎苛刻的要求拖垮了他的身","link":"","raw":null,"photos":[],"categories":[{"name":"日记","slug":"life","count":24,"path":"api/categories/life.json"}],"tags":[]}]}